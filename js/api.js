/**
 * ====================================================================
 * API Client for MITRE ATT&CK Matrix Application
 * ====================================================================
 * Version: 5.1 PRODUCTION - Session Token Support + Smart 401 Handling
 * Date: 2025-10-22
 * 
 * ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ session tokens (–Ω–µ JWT!)
 * ‚úÖ –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 401 (–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç)
 * ‚úÖ –ù–ï —É–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
 * ====================================================================
 */

class APIError extends Error {
    constructor(message, status = 0, code = 'UNKNOWN', details = null) {
        super(message);
        this.name = 'APIError';
        this.status = status;
        this.code = code;
        this.details = details;
    }
}

const API = {
    // =========================================================================
    // CONFIGURATION
    // =========================================================================

    baseURL: (window.APP_CONFIG?.apiBaseUrl || 'http://172.30.250.199:5000/api'),
    timeout: 30000,
    retryAttempts: 3,
    retryDelay: 1000,
    cache: new Map(),
    cacheExpiry: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    last401Time: 0,  // ‚Üê –¢—Ä–µ–∫–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ 401

    // =========================================================================
    // AUTHENTICATION
    // =========================================================================

    getAuthToken() {
        const token = localStorage.getItem('authToken');
        if (token && token.trim().length > 0) {
            return token;
        }
        return null;
    },

    isAuthenticated() {
        const token = this.getAuthToken();
        if (!token) {
            return false;
        }
        // Session tokens –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
        return token.length >= 20;
    },

    clearAuth() {
        localStorage.removeItem('authToken');
        localStorage.removeItem('user');
        this.cache.clear();
        console.log('üßπ Authentication cleared');
    },

    // =========================================================================
    // URL BUILDING
    // =========================================================================

    buildURL(endpoint, params = null) {
        const url = new URL(`${this.baseURL}${endpoint}`);

        if (params && typeof params === 'object') {
            Object.keys(params).forEach(key => {
                if (params[key] !== null && params[key] !== undefined) {
                    url.searchParams.append(key, params[key]);
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        url.searchParams.append('_t', Date.now());

        return url.toString();
    },

    // =========================================================================
    // HTTP REQUEST WITH TIMEOUT
    // =========================================================================

    async makeRequest(url, config) {
        const controller = new AbortController();
        const timeoutId = setTimeout(
            () => controller.abort(),
            config.requestTimeout || this.timeout
        );

        try {
            console.log(`üì§ API Request: ${config.method} ${url}`);

            const response = await fetch(url, {
                method: config.method,
                headers: config.headers,
                body: config.body,
                signal: controller.signal,
                cache: 'no-cache'
            });

            clearTimeout(timeoutId);

            console.log(`üì• API Response: ${response.status} ${response.statusText}`);

            return response;

        } catch (error) {
            clearTimeout(timeoutId);

            if (error.name === 'AbortError') {
                console.error('‚è±Ô∏è Request timeout');
                throw new APIError('Request timeout', 408, 'TIMEOUT');
            }

            if (!navigator.onLine) {
                console.error('üì° No internet connection');
                throw new APIError('No internet connection', 0, 'NETWORK_ERROR');
            }

            console.error('‚ùå Network error:', error);
            throw new APIError('Network error', 0, 'NETWORK_ERROR', error);
        }
    },

    // =========================================================================
    // RESPONSE HANDLING
    // =========================================================================

    async handleResponse(response) {
        let data;

        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            try {
                data = await response.json();
            } catch (e) {
                console.error('Failed to parse JSON:', e);
                data = { success: false, error: 'Invalid JSON response' };
            }
        } else {
            const text = await response.text();
            data = { success: response.ok, data: text };
        }

        if (!response.ok) {
            const message = data.error?.message || data.error || data.message || `HTTP ${response.status}`;
            throw new APIError(message, response.status, 'HTTP_ERROR', data);
        }

        return data;
    },

    // =========================================================================
    // MAIN REQUEST METHOD
    // =========================================================================

    async request(method, endpoint, data = null, options = {}) {
        const token = this.getAuthToken();

        const config = {
            method: method.toUpperCase(),
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                ...options.headers
            },
            requestTimeout: options.timeout || this.timeout
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }

        // –î–ª—è POST/PUT/PATCH –¥–æ–±–∞–≤–ª—è–µ–º body
        if (data && ['POST', 'PUT', 'PATCH'].includes(config.method)) {
            config.body = JSON.stringify(data);
        }

        // –°—Ç—Ä–æ–∏–º URL
        const url = this.buildURL(endpoint, config.method === 'GET' ? data : null);
        const cacheKey = `${config.method}:${url}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
        if (config.method === 'GET' && options.useCache !== false) {
            const cached = this.getFromCache(cacheKey);
            if (cached) {
                console.log('üíæ Returning cached data for:', endpoint);
                return cached;
            }
        }

        let lastError;

        // Retry logic
        for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
            try {
                const response = await this.makeRequest(url, config);
                const result = await this.handleResponse(response);

                // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ GET –∑–∞–ø—Ä–æ—Å—ã
                if (config.method === 'GET' && result.success && options.useCache !== false) {
                    this.setCache(cacheKey, result);
                }

                console.log(`‚úÖ Request successful:`, endpoint);
                return result;

            } catch (error) {
                lastError = error;

                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê 401
                if (error.status === 401) {
                    const now = Date.now();
                    const timeSinceLast401 = now - this.last401Time;

                    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
                    console.log('‚ùå 401 Unauthorized');
                    console.log(`   Message: ${error.message}`);
                    console.log(`   Time since last 401: ${timeSinceLast401}ms`);

                    // ‚úÖ –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê:
                    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π 401 –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 5 —Å–µ–∫ —Å–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ,
                    // —Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º,
                    // –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω

                    if (timeSinceLast401 < 5000) {
                        console.warn('‚ö†Ô∏è Multiple 401 errors within 5 seconds. NOT clearing auth.');
                        this.last401Time = now;
                        break;
                    }

                    // –ï—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–Ω–µ —Å–µ–≥–º–µ–Ω—Ç–∞, –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∏ —Ç.–¥.)
                    // —Ç–æ –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
                    const isTokenExpired =
                        error.message.includes('expired') ||
                        error.message.includes('revoked') ||
                        error.message.includes('invalid') && error.message.includes('token');

                    if (isTokenExpired) {
                        console.log('‚ùå Token expired/revoked - clearing auth');
                        this.clearAuth();
                    } else {
                        console.warn('‚ö†Ô∏è 401 but token may be valid - NOT clearing');
                    }

                    this.last401Time = now;
                    break;
                }

                // –î–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (4xx –∫—Ä–æ–º–µ 401) –Ω–µ –¥–µ–ª–∞–µ–º retry
                if (error.status >= 400 && error.status < 500) {
                    console.error(`‚ùå Client error ${error.status}:`, error.message);
                    break;
                }

                // –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º retry
                if (attempt >= this.retryAttempts) {
                    console.error(`‚ùå Max retries reached (${this.retryAttempts})`);
                    break;
                }

                console.warn(`‚ö†Ô∏è Retry ${attempt}/${this.retryAttempts} for ${endpoint}`);
                await this.delay(this.retryDelay * attempt);
            }
        }

        console.error('‚ùå API Error:', {
            message: lastError.message,
            method: config.method,
            endpoint,
            status: lastError.status,
            code: lastError.code,
            timestamp: new Date().toISOString()
        });

        throw lastError;
    },

    // =========================================================================
    // UTILITIES
    // =========================================================================

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    },

    getFromCache(key) {
        const cached = this.cache.get(key);
        if (cached && (Date.now() - cached.timestamp < this.cacheExpiry)) {
            return cached.data;
        }
        if (cached) {
            this.cache.delete(key);
        }
        return null;
    },

    setCache(key, data) {
        this.cache.set(key, {
            data,
            timestamp: Date.now()
        });
    },

    clearCache() {
        this.cache.clear();
        console.log('üßπ Cache cleared');
    },

    // =========================================================================
    // HTTP METHODS
    // =========================================================================

    async get(endpoint, params = null, options = {}) {
        return this.request('GET', endpoint, params, options);
    },

    async post(endpoint, data = null, options = {}) {
        return this.request('POST', endpoint, data, options);
    },

    async put(endpoint, data = null, options = {}) {
        return this.request('PUT', endpoint, data, options);
    },

    async patch(endpoint, data = null, options = {}) {
        return this.request('PATCH', endpoint, data, options);
    },

    async delete(endpoint, options = {}) {
        return this.request('DELETE', endpoint, null, options);
    },

    // =========================================================================
    // API ENDPOINTS
    // =========================================================================

    async getTechniques(params) {
        return this.get('/techniques', params);
    },

    async getTechnique(techniqueId) {
        return this.get(`/techniques/${techniqueId}`);
    },

    async updateTechnique(techniqueId, data) {
        return this.put(`/techniques/${techniqueId}`, data);
    },

    async getRules(params) {
        return this.get('/rules', params);
    },

    async getRule(ruleId) {
        return this.get(`/rules/${ruleId}`);
    },

    async createRule(data) {
        return this.post('/rules', data);
    },

    async updateRule(ruleId, data) {
        return this.put(`/rules/${ruleId}`, data);
    },

    async deleteRule(ruleId) {
        return this.delete(`/rules/${ruleId}`);
    },

    async getComments(params) {
        return this.get('/comments', params);
    },

    async getComment(commentId) {
        return this.get(`/comments/${commentId}`);
    },

    async createComment(data) {
        return this.post('/comments', data);
    },

    async updateComment(commentId, data) {
        return this.put(`/comments/${commentId}`, data);
    },

    async deleteComment(commentId) {
        return this.delete(`/comments/${commentId}`);
    },

    async getUsers(params) {
        return this.get('/users', params);
    },

    async getUser(userId) {
        return this.get(`/users/${userId}`);
    },

    async createUser(data) {
        return this.post('/users', data);
    },

    async updateUser(userId, data) {
        return this.put(`/users/${userId}`, data);
    },

    async deleteUser(userId) {
        return this.delete(`/users/${userId}`);
    },

    async getAuditLogs(params) {
        return this.get('/audit', params);
    },

    async getAnalytics(params) {
        return this.get('/analytics', params);
    },

    async getStatistics(params) {
        return this.get('/statistics', params);
    },

    async getMatrix() {
        return this.get('/matrix');
    }
};

// =========================================================================
// EXPORT
// =========================================================================

window.API = API;
console.log('‚úÖ API Client v5.1 PRODUCTION initialized (SMART 401 HANDLING)');
