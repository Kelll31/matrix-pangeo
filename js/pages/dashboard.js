/**
 * MITRE ATT&CK Matrix v10.1
 * Dashboard Page Module
 * Fixed: Works without /statistics/trends endpoint
 */

const Dashboard = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: {
        refreshInterval: 300000, // 5 –º–∏–Ω—É—Ç
        activityLimit: 10,
        statisticsCache: null,
        autoRefresh: true
    },

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    state: {
        isLoading: false,
        lastUpdate: null,
        refreshTimer: null,
        charts: {},
        statistics: null
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
    async load() {
        console.log('üìä Loading Dashboard...');

        if (this.state.isLoading) {
            console.log('Dashboard is already loading');
            return;
        }

        try {
            this.state.isLoading = true;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await Promise.all([
                this.loadStatistics(),
                this.loadActivityFeed()
                // –£–±—Ä–∞–ª–∏ loadTrendData() - —ç—Ç–æ—Ç endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            ]);

            // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
            this.state.lastUpdate = new Date();
            this.updateLastUpdateTime();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (this.config.autoRefresh) {
                this.startAutoRefresh();
            }

            console.log('‚úÖ Dashboard loaded successfully');

        } catch (error) {
            console.error('Dashboard load error:', error);
            this.handleLoadError(error);
        } finally {
            this.state.isLoading = false;
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async loadStatistics() {
        try {
            const response = await API.getStatistics();

            if (response.success) {
                this.state.statistics = response.data;
                this.renderStatistics(response.data.overview);

                // –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
                if (response.data.coverage) {
                    this.renderCoverageChart(response.data.coverage);
                }
                if (response.data.tactics) {
                    this.renderTacticBreakdown(response.data.tactics);
                }
            } else {
                throw new Error(response.message || 'Failed to load statistics');
            }
        } catch (error) {
            console.error('Statistics load error:', error);
            throw error;
        }
    },

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    renderStatistics(overview) {
        const stats = {
            techniques: overview.active_techniques || overview.total_techniques || 0,
            covered: overview.covered_techniques || overview.techniques_with_rules || 0,
            rules: overview.active_rules || overview.total_rules || 0,
            comments: overview.total_comments || 0
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        Object.entries(stats).forEach(([key, value]) => {
            const element = document.getElementById(`stat${Utils.capitalize(key)}`);
            if (element) {
                const currentValue = parseInt(element.textContent) || 0;
                this.animateValue(element, currentValue, value, 1000);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
        const coveragePercent = stats.techniques > 0
            ? Math.round((stats.covered / stats.techniques) * 100)
            : 0;

        this.updateCoverageIndicator(coveragePercent);
    },

    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    animateValue(element, start, end, duration) {
        if (start === end) return;

        const range = end - start;
        const increment = range / (duration / 16);
        let current = start;

        const timer = setInterval(() => {
            current += increment;

            if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {
                current = end;
                clearInterval(timer);
            }

            element.textContent = Math.round(current);
        }, 16);
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    updateCoverageIndicator(percent) {
        const indicators = document.querySelectorAll('.coverage-indicator');
        indicators.forEach(indicator => {
            indicator.textContent = `${percent}%`;

            // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            indicator.className = 'coverage-indicator';
            if (percent >= 80) {
                indicator.classList.add('excellent');
            } else if (percent >= 60) {
                indicator.classList.add('good');
            } else if (percent >= 40) {
                indicator.classList.add('medium');
            } else {
                indicator.classList.add('low');
            }
        });
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    async loadActivityFeed() {
        const container = document.getElementById('dashboardActivity');
        if (!container) return;

        try {
            Utils.showLoading(container, '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');

            const response = await API.get('/audit/', {
                limit: this.config.activityLimit,
                sort: '-created_at'
            });

            if (response.success && response.data.logs) {
                this.renderActivityFeed(container, response.data.logs);
            } else {
                Utils.showEmptyState(container, {
                    icon: 'fas fa-history',
                    title: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                    message: '–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–∞'
                });
            }
        } catch (error) {
            console.error('Activity feed error:', error);
            Utils.showErrorState(container, error, {
                retry: { onclick: 'Dashboard.loadActivityFeed()', text: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' }
            });
        }
    },

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    renderActivityFeed(container, activities) {
        if (!activities || activities.length === 0) {
            Utils.showEmptyState(container, {
                icon: 'fas fa-history',
                title: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                message: '–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–∞'
            });
            return;
        }

        const activityHTML = activities.map(activity => `
            <div class="activity-item" data-id="${activity.id}">
                <div class="activity-icon ${this.getActivityTypeClass(activity.action)}">
                    <i class="${this.getActivityIcon(activity.action)}"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-header">
                        <span class="activity-user">${Utils.escapeHtml(activity.user_name || 'System')}</span>
                        <span class="activity-action">${this.formatActivityAction(activity.action)}</span>
                        ${activity.entity_type ? `
                            <span class="activity-entity">${Utils.escapeHtml(activity.entity_type)}</span>
                        ` : ''}
                    </div>
                    ${activity.description ? `
                        <div class="activity-description">
                            ${Utils.escapeHtml(activity.description)}
                        </div>
                    ` : ''}
                    <div class="activity-meta">
                        <span class="activity-time">
                            <i class="fas fa-clock"></i>
                            ${Utils.timeAgo(activity.created_at)}
                        </span>
                        ${activity.ip_address ? `
                            <span class="activity-ip">
                                <i class="fas fa-network-wired"></i>
                                ${Utils.escapeHtml(activity.ip_address)}
                            </span>
                        ` : ''}
                    </div>
                </div>
            </div>
        `).join('');

        container.innerHTML = `
            <div class="activity-feed">
                ${activityHTML}
            </div>
            <div class="activity-footer">
                <a href="#audit" class="btn btn-link" onclick="App.navigateToSection('audit')">
                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é <i class="fas fa-arrow-right"></i>
                </a>
            </div>
        `;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    getActivityTypeClass(action) {
        const classMap = {
            'create': 'success',
            'update': 'info',
            'delete': 'danger',
            'login': 'primary',
            'logout': 'secondary'
        };
        return classMap[action] || 'default';
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    getActivityIcon(action) {
        const iconMap = {
            'create': 'fas fa-plus',
            'update': 'fas fa-edit',
            'delete': 'fas fa-trash',
            'login': 'fas fa-sign-in-alt',
            'logout': 'fas fa-sign-out-alt',
            'view': 'fas fa-eye',
            'export': 'fas fa-download'
        };
        return iconMap[action] || 'fas fa-info-circle';
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    formatActivityAction(action) {
        const actionMap = {
            'create': '—Å–æ–∑–¥–∞–ª(–∞)',
            'update': '–æ–±–Ω–æ–≤–∏–ª(–∞)',
            'delete': '—É–¥–∞–ª–∏–ª(–∞)',
            'login': '–≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É',
            'logout': '–≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
            'view': '–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª(–∞)',
            'export': '—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª(–∞)'
        };
        return actionMap[action] || action;
    },

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    renderCoverageChart(coverageData) {
        if (!coverageData) return;

        const container = document.querySelector('.coverage-chart-container');
        if (!container) return;

        const total = coverageData.total_techniques || 0;
        const covered = coverageData.covered_techniques || 0;
        const percentage = total > 0 ? Math.round((covered / total) * 100) : 0;

        container.innerHTML = `
            <div class="coverage-chart">
                <div class="coverage-chart-circle">
                    <svg viewBox="0 0 100 100">
                        <circle class="coverage-bg" cx="50" cy="50" r="45" />
                        <circle class="coverage-progress" cx="50" cy="50" r="45" 
                                style="stroke-dasharray: ${percentage * 2.827}, 282.7" />
                    </svg>
                    <div class="coverage-value">
                        <span class="coverage-percent">${percentage}%</span>
                        <span class="coverage-label">–ü–æ–∫—Ä—ã—Ç–∏–µ</span>
                    </div>
                </div>
                <div class="coverage-legend">
                    <div class="coverage-legend-item">
                        <span class="coverage-legend-color covered"></span>
                        <span class="coverage-legend-text">–ü–æ–∫—Ä—ã—Ç–æ: ${covered}</span>
                    </div>
                    <div class="coverage-legend-item">
                        <span class="coverage-legend-color uncovered"></span>
                        <span class="coverage-legend-text">–ù–µ –ø–æ–∫—Ä—ã—Ç–æ: ${total - covered}</span>
                    </div>
                </div>
            </div>
        `;
    },

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º
    renderTacticBreakdown(tactics) {
        if (!tactics || !Array.isArray(tactics)) return;

        const container = document.querySelector('.tactic-breakdown-container');
        if (!container) return;

        const maxCount = Math.max(...tactics.map(t => t.technique_count || 0));

        const tacticsHTML = tactics.map(tactic => {
            const count = tactic.technique_count || 0;
            const percentage = maxCount > 0 ? (count / maxCount) * 100 : 0;
            const coveragePercent = tactic.coverage_percent || 0;

            return `
                <div class="tactic-item" data-tactic="${tactic.tactic_id}">
                    <div class="tactic-header">
                        <span class="tactic-name">${Utils.escapeHtml(tactic.tactic_name)}</span>
                        <span class="tactic-count">${count} —Ç–µ—Ö–Ω–∏–∫</span>
                    </div>
                    <div class="tactic-progress">
                        <div class="tactic-progress-bar" 
                             style="width: ${percentage}%"
                             title="${coveragePercent}% –ø–æ–∫—Ä—ã—Ç–æ">
                            <span class="tactic-progress-text">${coveragePercent}%</span>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = `
            <div class="tactic-breakdown">
                <h3 class="tactic-breakdown-title">
                    <i class="fas fa-chart-bar"></i> –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º
                </h3>
                <div class="tactic-list">
                    ${tacticsHTML}
                </div>
            </div>
        `;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateLastUpdateTime() {
        const elements = document.querySelectorAll('.last-update-time');
        elements.forEach(element => {
            if (this.state.lastUpdate) {
                element.textContent = `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${Utils.timeAgo(this.state.lastUpdate)}`;
            }
        });
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
    async refresh() {
        console.log('üîÑ Refreshing Dashboard...');

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if (window.Notifications) {
                Notifications.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', { duration: 2000 });
            }

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            await this.load();

            if (window.Notifications) {
                Notifications.success('–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω', { duration: 3000 });
            }

        } catch (error) {
            console.error('Dashboard refresh error:', error);
            if (window.Notifications) {
                Notifications.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞', { duration: 5000 });
            }
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    async refreshActivity() {
        console.log('üîÑ Refreshing Activity Feed...');
        await this.loadActivityFeed();
    },

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    startAutoRefresh() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        this.stopAutoRefresh();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
        this.state.refreshTimer = setInterval(() => {
            console.log('‚è∞ Auto-refresh triggered');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if (!document.hidden && window.App && App.currentSection === 'dashboard') {
                this.refresh();
            }
        }, this.config.refreshInterval);

        console.log(`‚úÖ Auto-refresh started (every ${this.config.refreshInterval / 1000}s)`);
    },

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopAutoRefresh() {
        if (this.state.refreshTimer) {
            clearInterval(this.state.refreshTimer);
            this.state.refreshTimer = null;
            console.log('üõë Auto-refresh stopped');
        }
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    toggleAutoRefresh() {
        this.config.autoRefresh = !this.config.autoRefresh;

        if (this.config.autoRefresh) {
            this.startAutoRefresh();
            if (window.Notifications) {
                Notifications.success('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ');
            }
        } else {
            this.stopAutoRefresh();
            if (window.Notifications) {
                Notifications.info('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ');
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if (window.Utils) {
            Utils.localStorage.set('dashboard_auto_refresh', this.config.autoRefresh);
        }
    },

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
    async exportDashboard(format = 'json') {
        try {
            if (window.Notifications) {
                Notifications.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...');
            }

            const exportData = {
                statistics: this.state.statistics,
                exported_at: new Date().toISOString(),
                format: format
            };

            if (format === 'json') {
                const blob = new Blob(
                    [JSON.stringify(exportData, null, 2)],
                    { type: 'application/json' }
                );
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `dashboard-export-${Date.now()}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                if (window.Notifications) {
                    Notifications.success('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
                }
            } else {
                await API.exportData(format, 'dashboard');
            }

        } catch (error) {
            console.error('Export error:', error);
            if (window.Notifications) {
                Notifications.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
            }
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    handleLoadError(error) {
        const container = document.querySelector('#dashboard .content-body');
        if (!container) return;

        if (window.Utils) {
            Utils.showErrorState(container, error, {
                title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞',
                showDetails: true,
                retry: {
                    onclick: 'Dashboard.load()',
                    text: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'
                }
            });
        }

        if (window.Notifications) {
            Notifications.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, {
                duration: 0,
                persistent: true
            });
        }
    },

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    cleanup() {
        console.log('üßπ Cleaning up Dashboard...');
        this.stopAutoRefresh();

        // –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        Object.values(this.state.charts).forEach(chart => {
            if (chart && typeof chart.destroy === 'function') {
                chart.destroy();
            }
        });
        this.state.charts = {};
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏)
    getStatistics() {
        return this.state.statistics;
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
    isLoaded() {
        return this.state.statistics !== null && !this.state.isLoading;
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
window.Dashboard = Dashboard;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
document.addEventListener('DOMContentLoaded', () => {
    if (window.Utils) {
        const autoRefresh = Utils.localStorage.get('dashboard_auto_refresh', true);
        Dashboard.config.autoRefresh = autoRefresh;
    }

    console.log('Dashboard module initialized');
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    Dashboard.cleanup();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        Dashboard.stopAutoRefresh();
    } else if (window.App && App.currentSection === 'dashboard' && Dashboard.config.autoRefresh) {
        Dashboard.startAutoRefresh();
    }
});
