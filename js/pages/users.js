/**
 * ============================================================================
 * USERS MANAGEMENT PAGE - MITRE ATT&CK Matrix Platform
 * ============================================================================
 * ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ fetch
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API.isAuthenticated()
 * ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 * ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å modal_users.js –∏ Notifications
 * 
 * @version 3.0.0-AUTH-FIXED
 * @date 2025-10-22
 */

(function () {
    'use strict';

    // =============================================================================
    // CONFIGURATION
    // =============================================================================

    const USERS_API_BASE = window.APP_CONFIG?.apiBaseUrl || 'http://172.30.250.199:5000/api';

    // =============================================================================
    // STATE
    // =============================================================================

    let currentPage = 1;
    let currentFilters = {
        role: 'all',
        active: 'all',
        search: ''
    };
    let usersData = [];
    let usersStatistics = null;
    let isInitialized = false;

    // =============================================================================
    // INITIALIZATION
    // =============================================================================

    document.addEventListener('DOMContentLoaded', () => {
        console.log('üë• Users management initializing...');

        const usersSection = document.getElementById('users');
        if (!usersSection) {
            console.warn('‚ö†Ô∏è Users section not found');
            return;
        }

        setupEventListeners();

        // Load data when section becomes visible
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (usersSection.classList.contains('active') && !isInitialized) {
                    console.log('üìç Users section activated');

                    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
                    if (!API.isAuthenticated()) {
                        console.error('‚ùå Not authenticated');
                        showAuthError();
                        return;
                    }

                    isInitialized = true;
                    loadAllData();
                    observer.disconnect();
                }
            });
        });

        observer.observe(usersSection, {
            attributes: true,
            attributeFilter: ['class']
        });

        // Initial load if already visible
        if (usersSection.classList.contains('active')) {
            if (API.isAuthenticated()) {
                isInitialized = true;
                loadAllData();
            } else {
                showAuthError();
            }
        }

        console.log('‚úÖ Users management initialized');
    });

    // =============================================================================
    // EVENT LISTENERS
    // =============================================================================

    function setupEventListeners() {
        // Search
        const searchInput = document.getElementById('users-search');
        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    currentFilters.search = e.target.value.trim();
                    currentPage = 1;
                    loadUsers();
                }, 500);
            });
        }

        // Role filter
        const roleFilter = document.getElementById('users-role-filter');
        if (roleFilter) {
            roleFilter.addEventListener('change', (e) => {
                currentFilters.role = e.target.value;
                currentPage = 1;
                loadUsers();
            });
        }

        // Status filter
        const statusFilter = document.getElementById('users-status-filter');
        if (statusFilter) {
            statusFilter.addEventListener('change', (e) => {
                currentFilters.active = e.target.value;
                currentPage = 1;
                loadUsers();
            });
        }

        // Refresh button
        const refreshBtn = document.getElementById('users-refresh-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                console.log('üîÑ Refreshing users data...');
                loadAllData();
                notify('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            });
        }

        // Add user button
        const addBtn = document.getElementById('users-add-btn');
        if (addBtn) {
            addBtn.addEventListener('click', () => {
                if (window.ModalUsers) {
                    window.ModalUsers.showUserForm('create');
                } else {
                    console.error('‚ùå ModalUsers not loaded');
                    notify('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'error');
                }
            });
        }

        // Clear filters
        const clearBtn = document.getElementById('users-clear-filters-btn');
        if (clearBtn) {
            clearBtn.addEventListener('click', clearFilters);
        }
    }

    // =============================================================================
    // DATA LOADING
    // =============================================================================

    async function loadAllData() {
        console.log('üì• Loading all users data...');

        try {
            await Promise.all([
                loadUsers(),
                loadStatistics()
            ]);
            console.log('‚úÖ All users data loaded');
        } catch (error) {
            console.error('‚ùå Error loading all data:', error);
        }
    }

    async function loadUsers() {
        const container = document.getElementById('users-list-container');
        if (!container) {
            console.warn('‚ö†Ô∏è Users list container not found');
            return;
        }

        try {
            // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
            if (!API.isAuthenticated()) {
                console.error('‚ùå Not authenticated for users list');
                showAuthError();
                return;
            }

            // ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–û–ö–ï–ù–ê
            const token = localStorage.getItem('authToken');
            console.log(`üîê Auth token: ${token ? 'FOUND ‚úÖ' : 'MISSING ‚ùå'}`);
            if (token) {
                console.log(`üîë Token preview: ${token.substring(0, 20)}...`);
            }

            // Show loading
            container.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</div>';

            // Build params
            const params = {
                page: currentPage,
                limit: 20
            };

            if (currentFilters.search) {
                params.q = currentFilters.search;
            }
            if (currentFilters.role !== 'all') {
                params.role = currentFilters.role;
            }
            if (currentFilters.active !== 'all') {
                params.active = currentFilters.active;
            }

            console.log('üì§ Request params:', params);

            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú API –ö–õ–ò–ï–ù–¢
            const response = await API.get('/users', params);

            if (!response || !response.success) {
                throw new Error(response?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            }

            console.log('‚úÖ Users loaded:', response.data);

            usersData = response.data.users || [];
            renderUsers(usersData);
            renderPagination(response.data.pagination);

        } catch (error) {
            console.error('‚ùå Users load error:', error);
            console.error('Error details:', {
                message: error.message,
                status: error.status,
                code: error.code
            });

            container.innerHTML = `
                <div class="error-message" style="padding:20px;background:rgba(239,68,68,0.1);border:1px solid #ef4444;border-radius:8px;text-align:center;">
                    <i class="fas fa-exclamation-triangle" style="font-size:2rem;color:#dc2626;margin-bottom:10px;"></i>
                    <h3 style="color:#dc2626;margin:0 0 10px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                    <p style="color:#7f1d1d;margin:0;">${escapeHtml(error.message)}</p>
                </div>
            `;

            notify('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
        }
    }

    async function loadStatistics() {
        const container = document.getElementById('users-stats-container');
        if (!container) {
            console.warn('‚ö†Ô∏è Stats container not found');
            return;
        }

        try {
            // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
            if (!API.isAuthenticated()) {
                console.warn('‚ö†Ô∏è Not authenticated for statistics');
                return;
            }

            const token = localStorage.getItem('authToken');
            console.log(`üîê [Stats] Auth token: ${token ? 'FOUND ‚úÖ' : 'MISSING ‚ùå'}`);

            console.log('üì§ Loading statistics...');

            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú API –ö–õ–ò–ï–ù–¢
            const response = await API.get('/users/statistics');

            if (!response || !response.success) {
                console.warn('‚ö†Ô∏è Failed to load statistics');
                return;
            }

            console.log('‚úÖ Statistics loaded:', response.data);

            usersStatistics = response.data.user_stats || response.data;
            renderStatistics(usersStatistics);

        } catch (error) {
            console.error('‚ùå Statistics error:', error);
            console.error('Error details:', {
                message: error.message,
                status: error.status
            });
        }
    }

    // =============================================================================
    // RENDERING
    // =============================================================================

    function renderUsers(users) {
        const container = document.getElementById('users-list-container');
        if (!container) return;

        if (!users || users.length === 0) {
            container.innerHTML = `
                <div class="empty-state" style="text-align:center;padding:60px 20px;color:var(--text-muted);">
                    <i class="fas fa-users" style="font-size:4rem;margin-bottom:20px;opacity:0.5;"></i>
                    <h3 style="margin:0 0 10px;color:var(--text-primary);">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                    <p style="margin:0;">–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                </div>
            `;
            return;
        }

        const html = users.map(user => `
            <div class="user-card" data-user-id="${user.id}">
                <div class="user-avatar">
                    <i class="fas fa-user-circle"></i>
                </div>
                <div class="user-info">
                    <div class="user-header">
                        <h3 class="user-name">${escapeHtml(user.full_name || user.username)}</h3>
                        <span class="badge badge-role-${user.role}">${user.role}</span>
                        <span class="badge badge-status-${user.is_active ? 'active' : 'inactive'}">
                            ${user.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                        </span>
                    </div>
                    <div class="user-details">
                        <span><i class="fas fa-user"></i> ${escapeHtml(user.username)}</span>
                        <span><i class="fas fa-envelope"></i> ${escapeHtml(user.email || 'N/A')}</span>
                        <span><i class="fas fa-clock"></i> ${formatDateTime(user.created_at)}</span>
                    </div>
                    ${user.last_login ? `
                    <div class="user-meta">
                        <span><i class="fas fa-sign-in-alt"></i> –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${formatDateTime(user.last_login)}</span>
                    </div>
                    ` : ''}
                </div>
                <div class="user-actions">
                    <button class="btn btn-sm btn-primary" onclick="window.UsersManager.viewDetails('${user.id}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-secondary" onclick="window.UsersManager.edit('${user.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-warning" onclick="window.UsersManager.toggleStatus('${user.id}', ${!user.is_active})" 
                            title="${user.is_active ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}">
                        <i class="fas fa-${user.is_active ? 'ban' : 'check'}"></i>
                    </button>
                    <button class="btn btn-sm btn-info" onclick="window.UsersManager.changePassword('${user.id}')" title="–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å">
                        <i class="fas fa-key"></i>
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = html;
    }

    function renderStatistics(stats) {
        const container = document.getElementById('users-stats-container');
        if (!container) return;

        if (!stats) {
            container.innerHTML = '';
            return;
        }

        const html = `
            <div class="stats-grid">
                <div class="stat-card">
                    <i class="fas fa-users stat-icon"></i>
                    <div class="stat-content">
                        <span class="stat-value">${stats.total_users || stats.total || 0}</span>
                        <span class="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span>
                    </div>
                </div>
                <div class="stat-card active">
                    <i class="fas fa-user-check stat-icon"></i>
                    <div class="stat-content">
                        <span class="stat-value">${stats.active_users || stats.active || 0}</span>
                        <span class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</span>
                    </div>
                </div>
                <div class="stat-card admin">
                    <i class="fas fa-user-shield stat-icon"></i>
                    <div class="stat-content">
                        <span class="stat-value">${stats.admin_users || stats.admins || 0}</span>
                        <span class="stat-label">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</span>
                    </div>
                </div>
                <div class="stat-card">
                    <i class="fas fa-user-friends stat-icon"></i>
                    <div class="stat-content">
                        <span class="stat-value">${stats.active_last_30days || 0}</span>
                        <span class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã (30 –¥–Ω–µ–π)</span>
                    </div>
                </div>
            </div>
        `;

        container.innerHTML = html;
    }

    function renderPagination(pagination) {
        const container = document.getElementById('users-pagination');
        if (!container) return;

        if (!pagination || pagination.total_pages <= 1) {
            container.innerHTML = '';
            return;
        }

        let html = '<div class="pagination">';

        html += `<button class="btn-page" ${!pagination.has_prev ? 'disabled' : ''} 
                 onclick="window.UsersManager.changePage(${pagination.page - 1})">
                 <i class="fas fa-chevron-left"></i></button>`;

        const startPage = Math.max(1, pagination.page - 2);
        const endPage = Math.min(pagination.total_pages, pagination.page + 2);

        for (let i = startPage; i <= endPage; i++) {
            html += `<button class="btn-page ${i === pagination.page ? 'active' : ''}" 
                     onclick="window.UsersManager.changePage(${i})">${i}</button>`;
        }

        html += `<button class="btn-page" ${!pagination.has_next ? 'disabled' : ''} 
                 onclick="window.UsersManager.changePage(${pagination.page + 1})">
                 <i class="fas fa-chevron-right"></i></button>`;

        html += '</div>';
        container.innerHTML = html;
    }

    // =============================================================================
    // USER ACTIONS
    // =============================================================================

    function changePage(page) {
        if (page < 1) return;
        currentPage = page;
        loadUsers();
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    function clearFilters() {
        currentFilters = { role: 'all', active: 'all', search: '' };

        const roleFilter = document.getElementById('users-role-filter');
        if (roleFilter) roleFilter.value = 'all';

        const statusFilter = document.getElementById('users-status-filter');
        if (statusFilter) statusFilter.value = 'all';

        const searchInput = document.getElementById('users-search');
        if (searchInput) searchInput.value = '';

        currentPage = 1;
        loadUsers();
        notify('–§–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã', 'success');
    }

    async function viewDetails(userId) {
        try {
            if (!API.isAuthenticated()) {
                notify('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'error');
                return;
            }

            console.log(`üì• Loading details for user ${userId}`);

            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú API –ö–õ–ò–ï–ù–¢
            const response = await API.get(`/users/${userId}`);

            if (!response || !response.success) {
                throw new Error(response?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            }

            console.log('‚úÖ User details loaded:', response.data);

            if (window.ModalUsers) {
                window.ModalUsers.showUserDetails(response.data.user);
            } else {
                console.error('‚ùå ModalUsers not loaded');
                notify('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'error');
            }

        } catch (error) {
            console.error('‚ùå Details error:', error);
            notify('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error');
        }
    }

    function edit(userId) {
        const user = usersData.find(u => u.id === parseInt(userId));
        if (!user) {
            notify('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        if (window.ModalUsers) {
            window.ModalUsers.showUserForm('edit', user);
        } else {
            console.error('‚ùå ModalUsers not loaded');
            notify('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'error');
        }
    }

    function changePassword(userId) {
        if (window.ModalUsers) {
            window.ModalUsers.showPasswordModal(userId);
        } else {
            console.error('‚ùå ModalUsers not loaded');
            notify('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'error');
        }
    }

    // =============================================================================
    // API ACTIONS
    // =============================================================================

    async function submitCreate(userId, payload) {
        try {
            if (!payload.username || !payload.email || !payload.full_name || !payload.password) {
                notify('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'warning');
                return;
            }

            if (!API.isAuthenticated()) {
                notify('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'error');
                return;
            }

            console.log('üì§ Creating user...', payload);

            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú API –ö–õ–ò–ï–ù–¢
            const response = await API.post('/users', {
                username: payload.username,
                email: payload.email,
                full_name: payload.full_name,
                password: payload.password,
                role: payload.role,
                active: payload.is_active
            });

            if (!response || !response.success) {
                throw new Error(response?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

            console.log('‚úÖ User created successfully');
            notify('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
            loadAllData();

        } catch (error) {
            console.error('‚ùå Create error:', error);
            notify('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + error.message, 'error');
        }
    }

    async function submitEdit(userId, payload) {
        try {
            if (!payload.username || !payload.email || !payload.full_name) {
                notify('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'warning');
                return;
            }

            if (!API.isAuthenticated()) {
                notify('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'error');
                return;
            }

            console.log(`üì§ Updating user ${userId}...`, payload);

            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú API –ö–õ–ò–ï–ù–¢
            const response = await API.put(`/users/${userId}`, {
                username: payload.username,
                email: payload.email,
                full_name: payload.full_name,
                role: payload.role,
                is_active: payload.is_active
            });

            if (!response || !response.success) {
                throw new Error(response?.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            }

            console.log('‚úÖ User updated successfully');
            notify('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
            loadAllData();

        } catch (error) {
            console.error('‚ùå Update error:', error);
            notify('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }

    async function submitPassword(userId, newPassword) {
        try {
            if (!newPassword || newPassword.length < 8) {
                notify('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤', 'warning');
                return;
            }

            if (!API.isAuthenticated()) {
                notify('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'error');
                return;
            }

            console.log(`üì§ Changing password for user ${userId}`);

            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú API –ö–õ–ò–ï–ù–¢
            const response = await API.post(`/users/${userId}/password`, {
                new_password: newPassword
            });

            if (!response || !response.success) {
                throw new Error(response?.message || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è');
            }

            console.log('‚úÖ Password changed successfully');
            notify('–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω —É—Å–ø–µ—à–Ω–æ', 'success');

        } catch (error) {
            console.error('‚ùå Password change error:', error);
            notify('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ' + error.message, 'error');
        }
    }

    async function toggleStatus(userId, active) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?`)) {
            return;
        }

        try {
            if (!API.isAuthenticated()) {
                notify('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'error');
                return;
            }

            console.log(`üì§ Toggling user ${userId} status to ${active}`);

            // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú API –ö–õ–ò–ï–ù–¢
            const response = await API.post(`/users/${userId}/toggle`, { active });

            if (!response || !response.success) {
                throw new Error(response?.message || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
            }

            console.log('‚úÖ Status toggled successfully');
            notify(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`, 'success');
            loadAllData();

        } catch (error) {
            console.error('‚ùå Toggle error:', error);
            notify('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + error.message, 'error');
        }
    }

    // =============================================================================
    // UTILITIES
    // =============================================================================

    function showAuthError() {
        const container = document.getElementById('users-list-container');
        if (container) {
            container.innerHTML = `
                <div class="error-container" style="padding:40px;background:rgba(239,68,68,0.1);border:2px solid #dc2626;border-radius:12px;text-align:center;">
                    <i class="fas fa-lock" style="font-size:3rem;color:#dc2626;margin-bottom:15px;"></i>
                    <h3 style="color:#dc2626;margin:0 0 10px;">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
                    <p style="color:#7f1d1d;margin:0 0 20px;">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ</p>
                    <button onclick="window.location.reload()" class="btn btn-primary">
                        <i class="fas fa-sync"></i> –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            `;
        }
    }

    function notify(message, type = 'info') {
        if (window.Notifications && typeof window.Notifications.show === 'function') {
            window.Notifications.show(message, type);
        } else {
            console.log(`[${type.toUpperCase()}] ${message}`);
        }
    }

    function formatDateTime(isoString) {
        if (!isoString) return 'N/A';
        try {
            const date = new Date(isoString);
            return date.toLocaleString('ru-RU', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            return 'Invalid date';
        }
    }

    function escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // =============================================================================
    // GLOBAL EXPORTS
    // =============================================================================

    window.UsersManager = {
        changePage,
        viewDetails,
        edit,
        toggleStatus,
        changePassword,
        submitCreate,
        submitEdit,
        submitPassword,
        refresh: loadAllData
    };

    console.log('‚úÖ users.js loaded successfully');

})();
