/**
 * ========================================
 * MATRIX EVENTS v11.1 - –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –°–ö–†–û–õ–õ–ê
 * ========================================
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π UI –º–∞—Ç—Ä–∏—Ü—ã
 *
 * @version 11.1.0-SCROLL-PRESERVE
 * @date 2025-10-17
 */

const MatrixEvents = {
    elements: {
        filtersContainer: null,
        matrixContainer: null,
        statisticsContainer: null,
        searchInput: null,
        platformFilter: null,
        coverageFilter: null,
        tacticFilter: null
    },

    eventHandlers: new Map(),

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
     * @param {Function} updateCallback - –ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    init(state, updateCallback) {
        console.log('üéØ Initializing matrix events...');

        this.state = state;
        this.updateCallback = updateCallback;

        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {
            filtersContainer: Utils.$('#matrix-filters-container'),
            matrixContainer: Utils.$('#matrix-container'),
            statisticsContainer: Utils.$('#matrix-statistics-container'),
            searchInput: null,
            platformFilter: null,
            coverageFilter: null,
            tacticFilter: null
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.initFilterHandlers();
        this.initMatrixHandlers();
        this.initKeyboardHandlers();
        this.initScrollSyncHandlers();

        console.log('‚úÖ Matrix events initialized');
    },

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    initFilterHandlers() {
        const platformFilter = Utils.$('#platformFilter');
        const coverageFilter = Utils.$('#coverageFilter');
        const tacticFilter = Utils.$('#tacticFilter');
        const searchFilter = Utils.$('#searchFilter');

        if (!platformFilter || !coverageFilter || !tacticFilter || !searchFilter) {
            console.warn('‚ö†Ô∏è Filter elements not found, retrying...');
            setTimeout(() => this.initFilterHandlers(), 100);
            return;
        }

        // –§–∏–ª—å—Ç—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.addEventHandler('platformFilter', 'change', (event) => {
            console.log('Platform filter changed:', event.target.value);
            this.state.filters.platform = event.target.value === 'all' ? null : event.target.value;
            this.updateCallback();
        });

        // –§–∏–ª—å—Ç—Ä –ø–æ–∫—Ä—ã—Ç–∏—è
        this.addEventHandler('coverageFilter', 'change', (event) => {
            console.log('Coverage filter changed:', event.target.value);
            this.state.filters.coverage = event.target.value;
            this.updateCallback();
        });

        // –§–∏–ª—å—Ç—Ä —Ç–∞–∫—Ç–∏–∫–∏
        this.addEventHandler('tacticFilter', 'change', (event) => {
            console.log('Tactic filter changed:', event.target.value);
            this.state.filters.tactic = event.target.value === 'all' ? null : event.target.value;
            this.updateCallback();
        });

        // –ü–æ–∏—Å–∫ —Å debounce
        this.addEventHandler('searchFilter', 'input', Utils.debounce((event) => {
            console.log('Search filter changed:', event.target.value);
            this.state.filters.search = event.target.value.trim();
            this.updateCallback();
        }, 300));

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
        this.addEventHandler('clearSearch', 'click', () => {
            const searchInput = Utils.$('#searchFilter');
            if (searchInput) {
                searchInput.value = '';
                this.state.filters.search = '';
                this.updateCallback();
            }
        });
    },

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã
     */
    initMatrixHandlers() {
        // –ö–ª–∏–∫ –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –æ–∫–Ω–æ
        this.addDelegatedHandler('matrixContainer', 'click', '[data-action="show-details"]', (event, element) => {
            event.preventDefault();
            event.stopPropagation();

            const techniqueId = element.dataset.techniqueId;
            if (techniqueId) {
                this.handleTechniqueClick(techniqueId);
            }
        });

        // –†–∞—Å–∫—Ä—ã—Ç–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫
        this.addDelegatedHandler('matrixContainer', 'click', '[data-action="toggle-expand"]', (event, element) => {
            event.preventDefault();
            event.stopPropagation();

            const techniqueId = element.dataset.techniqueId;
            if (techniqueId) {
                this.handleExpandToggle(techniqueId);
            }
        });

        // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.addDelegatedHandler('matrixContainer', 'mouseenter', '.matrix-cell[data-technique-id]', (event, element) => {
            element.classList.add('cell-hover');
        });

        this.addDelegatedHandler('matrixContainer', 'mouseleave', '.matrix-cell[data-technique-id]', (event, element) => {
            element.classList.remove('cell-hover');
        });
    },

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    initKeyboardHandlers() {
        const keyboardHandler = (event) => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –≤ input
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                return;
            }

            switch (event.key) {
                case '/':
                    event.preventDefault();
                    const searchInput = Utils.$('#searchFilter');
                    if (searchInput) {
                        searchInput.focus();
                    }
                    break;

                case 'Escape':
                case 'Esc':
                    const activeSearch = Utils.$('#searchFilter');
                    if (activeSearch && activeSearch === document.activeElement) {
                        activeSearch.blur();
                        if (activeSearch.value) {
                            activeSearch.value = '';
                            this.state.filters.search = '';
                            this.updateCallback();
                        }
                    }
                    break;

                case 'r':
                case 'R':
                    if (event.ctrlKey || event.metaKey) {
                        event.preventDefault();
                        this.resetFilters();
                    }
                    break;
            }
        };

        document.addEventListener('keydown', keyboardHandler);
        this.eventHandlers.set('globalKeyboard', keyboardHandler);
    },

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
     */
    initScrollSyncHandlers() {
        const matrixScroll = Utils.$('.matrix-scroll-container');
        if (!matrixScroll) return;

        let isScrolling = false;

        const scrollHandler = Utils.throttle(() => {
            if (!isScrolling) {
                isScrolling = true;
                requestAnimationFrame(() => {
                    isScrolling = false;
                });
            }
        }, 16); // 60 FPS

        matrixScroll.addEventListener('scroll', scrollHandler);
        this.eventHandlers.set('matrixScroll', scrollHandler);
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏–∫—É
     * @param {string} techniqueId - ID —Ç–µ—Ö–Ω–∏–∫–∏
     */
    async handleTechniqueClick(techniqueId) {
        console.log('üéØ Technique clicked:', techniqueId);

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ç—Ä–∏—á–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if (window.MatrixServices && MatrixServices.showMatrixQuickView) {
                await MatrixServices.showMatrixQuickView(techniqueId);
            } else {
                // Fallback
                console.warn('‚ö†Ô∏è MatrixServices.showMatrixQuickView not available, using fallback');
                const loadingModalId = ModalEngine.loading(`–ó–∞–≥—Ä—É–∑–∫–∞ ${techniqueId}...`);
                const fullData = await MatrixServices.fetchTechniqueFullData(techniqueId);
                ModalEngine.close(loadingModalId);

                if (!fullData.technique) {
                    throw new Error(`–¢–µ—Ö–Ω–∏–∫–∞ ${techniqueId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }

                if (window.TechniqueModal) {
                    TechniqueModal.view(fullData.technique);
                } else {
                    ModalEngine.alert('–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', '–û—à–∏–±–∫–∞');
                }
            }
        } catch (error) {
            console.error('‚ùå Error loading technique:', techniqueId, error);

            try {
                ModalEngine.closeAll();
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            }

            if (window.Notifications) {
                Notifications.show(
                    `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏ ${techniqueId}: ${error.message}`,
                    'error',
                    { duration: 5000 }
                );
            }
        }
    },

    /**
     * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
     * @param {string} techniqueId - ID —Ç–µ—Ö–Ω–∏–∫–∏
     */
    handleExpandToggle(techniqueId) {
        console.log('üîÑ Toggle expand:', techniqueId);

        // üîß –°–û–•–†–ê–ù–Ø–ï–ú –ü–û–ó–ò–¶–ò–Æ –°–ö–†–û–õ–õ–ê
        const scrollContainer = document.querySelector('.matrix-scroll-container');
        const topScrollbar = document.querySelector('.matrix-top-scrollbar-wrapper');

        const savedScrollTop = scrollContainer ? scrollContainer.scrollTop : 0;
        const savedScrollLeft = scrollContainer ? scrollContainer.scrollLeft : 0;

        console.log('üíæ Saving scroll position:', { top: savedScrollTop, left: savedScrollLeft });

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const isExpanded = this.state.expandedTechniques.has(techniqueId);

        if (isExpanded) {
            this.state.expandedTechniques.delete(techniqueId);
        } else {
            this.state.expandedTechniques.add(techniqueId);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
        this.updateCallback();

        // üîß –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–û–ó–ò–¶–ò–Æ –°–ö–†–û–õ–õ–ê –ü–û–°–õ–ï –†–ï–ù–î–ï–†–ê
        requestAnimationFrame(() => {
            if (scrollContainer) {
                scrollContainer.scrollTop = savedScrollTop;
                scrollContainer.scrollLeft = savedScrollLeft;
                console.log('‚úÖ Restored scroll position:', { top: savedScrollTop, left: savedScrollLeft });
            }

            if (topScrollbar) {
                topScrollbar.scrollLeft = savedScrollLeft;
            }
        });
    },

    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    resetFilters() {
        console.log('Resetting all filters');

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.filters = {
            platform: null,
            coverage: 'all',
            tactic: null,
            search: ''
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const platformFilter = Utils.$('#platformFilter');
        const coverageFilter = Utils.$('#coverageFilter');
        const tacticFilter = Utils.$('#tacticFilter');
        const searchFilter = Utils.$('#searchFilter');

        if (platformFilter) platformFilter.value = 'all';
        if (coverageFilter) coverageFilter.value = 'all';
        if (tacticFilter) tacticFilter.value = 'all';
        if (searchFilter) searchFilter.value = '';

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
        this.updateCallback();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.Notifications) {
            Notifications.show('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã', 'info', { duration: 2000 });
        }
    },

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ç—Ä–∏—Ü—ã
     * @param {string} format - –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    async exportMatrix(format = 'json') {
        console.log('Exporting matrix:', format);

        try {
            if (window.Notifications) {
                Notifications.show(`–≠–∫—Å–ø–æ—Ä—Ç –≤ ${format.toUpperCase()}...`, 'info');
            }

            await MatrixServices.exportMatrix(format);

            if (window.Notifications) {
                Notifications.show(`–ú–∞—Ç—Ä–∏—Ü–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${format.toUpperCase()}`, 'success', { duration: 3000 });
            }
        } catch (error) {
            console.error('Export error:', error);

            if (window.Notifications) {
                Notifications.show(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message}`, 'error', { duration: 5000 });
            }
        }
    },

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
     */
    addEventHandler(elementId, eventType, handler) {
        const attachHandler = () => {
            const element = Utils.$(`#${elementId}`);
            if (element) {
                element.addEventListener(eventType, handler);
                const key = `${elementId}:${eventType}`;
                this.eventHandlers.set(key, {
                    element: element,
                    eventType: eventType,
                    handler: handler
                });
                return true;
            }
            return false;
        };

        if (!attachHandler()) {
            setTimeout(attachHandler, 100);
        }
    },

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
     */
    addDelegatedHandler(containerId, eventType, selector, handler) {
        const container = this.elements[containerId] || Utils.$(`#${containerId}`);
        if (!container) {
            console.warn('Container not found:', containerId);
            return;
        }

        const delegatedHandler = (event) => {
            const targetElement = event.target.closest(selector);
            if (targetElement) {
                handler(event, targetElement);
            }
        };

        container.addEventListener(eventType, delegatedHandler);
        const key = `${containerId}:${eventType}:${selector}`;
        this.eventHandlers.set(key, {
            element: container,
            eventType: eventType,
            handler: delegatedHandler
        });
    },

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     */
    cleanup() {
        console.log('üßπ Cleaning up matrix events...');

        this.eventHandlers.forEach((handlerInfo, key) => {
            if (handlerInfo.element && handlerInfo.handler) {
                handlerInfo.element.removeEventListener(handlerInfo.eventType, handlerInfo.handler);
            }
        });

        this.eventHandlers.clear();
        console.log('‚úÖ Matrix events cleaned up');
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç
window.MatrixEvents = MatrixEvents;
console.log('‚úÖ Matrix Events v11.1 (with scroll preservation) loaded');
