/**
 * ========================================================================
 * MATRIX ORGANIZER v11.0 - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù
 * ========================================================================
 * –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π —Ç–µ—Ö–Ω–∏–∫
 * –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º –∏ –ø–æ–¥—Ç–µ—Ö–Ω–∏–∫–∞–º
 * 
 * @version 11.0.0-FINAL
 * @date 2025-10-17
 */

const MatrixOrganizer = {
    /**
     * üîß –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü—ã –≤ —Ç–∞–±–ª–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
     * @param {Object} matrixData - –î–∞–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã —Å —Ç–∞–∫—Ç–∏–∫–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
     * @param {Object} filters - –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
     * @returns {Object} –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã
     */
    organizeMatrix(matrixData, filters = {}) {
        console.log('üìä Organizing matrix data...', {
            tactics: matrixData.tactics?.length || 0,
            parent_techniques: matrixData.parent_techniques?.length || 0,
            filters
        });

        if (!matrixData || !matrixData.tactics || !matrixData.parent_techniques) {
            console.error('‚ùå Invalid matrix data structure');
            return { rows: [], tactics: [], filteredCount: 0, totalCount: 0 };
        }

        // 1. –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–∫—Ç–∏–∫–∏
        const tactics = this._filterTactics(matrixData.tactics, filters);
        console.log(`‚úÖ Filtered tactics: ${tactics.length}`);

        // 2. –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
        const filteredTechniques = this._filterTechniques(matrixData.parent_techniques, filters);
        console.log(`‚úÖ Filtered parent techniques: ${filteredTechniques.length}`);

        // 3. –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É —Ç–µ—Ö–Ω–∏–∫ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º
        const techniquesByTactic = this._buildTechniquesByTacticMap(filteredTechniques, tactics);

        // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–∫—Ç–∏–∫–∏
        const maxRowsPerTactic = {};
        tactics.forEach(tactic => {
            const tacticId = this._getTacticId(tactic);
            maxRowsPerTactic[tacticId] = (techniquesByTactic[tacticId] || []).length;
        });

        const maxRows = Math.max(...Object.values(maxRowsPerTactic), 0);
        console.log(`üìè Max rows needed: ${maxRows}`);

        // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
        const rows = this._generateMatrixRows(tactics, techniquesByTactic, maxRows);

        console.log(`‚úÖ Matrix organized: ${rows.length} rows, ${tactics.length} tactics`);

        return {
            rows,
            tactics,
            filteredCount: filteredTechniques.length,
            totalCount: matrixData.parent_techniques?.length || 0
        };
    },

    /**
     * üîß –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–∫—Ç–∏–∫
     */
    _filterTactics(tactics, filters) {
        let filtered = [...tactics];

        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–∫—Ç–∏–∫–µ
        if (filters.tactic && filters.tactic !== 'all') {
            filtered = filtered.filter(t =>
                this._getTacticShortname(t) === filters.tactic
            );
        }

        return filtered;
    },

    /**
     * üîß –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫
     */
    _filterTechniques(techniques, filters) {
        let filtered = [...techniques];

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        if (filters.platform && filters.platform !== 'all') {
            filtered = filtered.filter(tech => {
                const platforms = tech.platforms || [];
                return platforms.includes(filters.platform);
            });
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é
        if (filters.coverage === 'covered') {
            filtered = filtered.filter(tech => {
                const activeRules = tech.coverage?.active_rules || 0;
                return activeRules > 0;
            });
        } else if (filters.coverage === 'uncovered') {
            filtered = filtered.filter(tech => {
                const activeRules = tech.coverage?.active_rules || 0;
                return activeRules === 0;
            });
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
        if (filters.search && filters.search.trim()) {
            const searchLower = filters.search.toLowerCase().trim();
            filtered = filtered.filter(tech => {
                const techId = this._getTechniqueId(tech).toLowerCase();
                const techName = (tech.name_ru || tech.name || '').toLowerCase();
                return techId.includes(searchLower) || techName.includes(searchLower);
            });
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–∫—Ç–∏–∫–µ
        if (filters.tactic && filters.tactic !== 'all') {
            filtered = filtered.filter(tech => {
                const tactics = tech.tactics || [];
                return tactics.some(t =>
                    this._getTacticShortname(t) === filters.tactic
                );
            });
        }

        return filtered;
    },

    /**
     * üîß –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ç–µ—Ö–Ω–∏–∫ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º
     */
    _buildTechniquesByTacticMap(techniques, tactics) {
        const techniquesByTactic = {};

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
        tactics.forEach(tactic => {
            const tacticId = this._getTacticId(tactic);
            techniquesByTactic[tacticId] = [];
        });

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º
        techniques.forEach(technique => {
            const techniqueTactics = technique.tactics || [];

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É –≤ –∫–∞–∂–¥—É—é –µ—ë —Ç–∞–∫—Ç–∏–∫—É
            techniqueTactics.forEach(techTactic => {
                const tacticId = this._getTacticShortname(techTactic);

                if (techniquesByTactic[tacticId]) {
                    techniquesByTactic[tacticId].push(technique);
                }
            });
        });

        return techniquesByTactic;
    },

    /**
     * üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã
     */
    _generateMatrixRows(tactics, techniquesByTactic, maxRows) {
        const rows = [];

        for (let rowIndex = 0; rowIndex < maxRows; rowIndex++) {
            const row = {
                index: rowIndex,
                cells: []
            };

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–∫—Ç–∏–∫–∏
            tactics.forEach(tactic => {
                const tacticId = this._getTacticId(tactic);
                const techniques = techniquesByTactic[tacticId] || [];
                const technique = techniques[rowIndex] || null;

                // –°–æ–∑–¥–∞—ë–º —è—á–µ–π–∫—É
                const cell = {
                    tacticId: tacticId,
                    rowIndex: rowIndex,
                    isEmpty: !technique,
                    technique: technique,
                    subtechniques: technique ? (technique.subtechniques || []) : []
                };

                row.cells.push(cell);
            });

            rows.push(row);
        }

        return rows;
    },

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    _getTacticId(tactic) {
        return tactic?.shortname || tactic?.x_mitre_shortname || tactic?.id || '';
    },

    _getTacticShortname(tactic) {
        return tactic?.shortname || tactic?.x_mitre_shortname || '';
    },

    _getTechniqueId(tech) {
        return tech?.technique_id || tech?.attack_id || tech?.id || '';
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç
window.MatrixOrganizer = MatrixOrganizer;
console.log('‚úÖ Matrix Organizer v11.0 loaded');
