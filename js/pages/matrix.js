/**
 * ========================================
 * MATRIX PAGE LOADER - –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
 * MITRE ATT&CK Matrix Application v10.1
 * ========================================
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ js/pages/matrix.js
 * –û–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –ø–∞–ø–∫–∏ js/pages/matrix/
 * 
 * @author Storm Labs
 * @version 10.1.0
 * @date 2025-10-17
 */

(function () {
    'use strict';

    console.log('üöÄ Matrix Page Loader starting...');

    // ========================================
    // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    // ========================================

    const MATRIX_CONFIG = {
        basePath: '/js/pages/matrix/',
        modules: [
            'services.js',      // API –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            'organizer.js',     // –õ–æ–≥–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            'renderer.js',      // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
            'events.js',        // –°–æ–±—ã—Ç–∏—è UI
            'index.js'          // –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
        ],
        dependencies: [
            'API',              // –ì–ª–æ–±–∞–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç
            'Utils',            // –£—Ç–∏–ª–∏—Ç—ã
            'ModalEngine',      // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            'Notifications'     // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        ],
        timeout: 30000,         // –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (30 —Å–µ–∫)
        retries: 3,             // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        retryDelay: 1000        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å)
    };

    // ========================================
    // –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ì–†–£–ó–ß–ò–ö–ê
    // ========================================

    const LoaderState = {
        loadedModules: new Set(),
        loadingPromises: new Map(),
        startTime: Date.now(),
        errors: []
    };

    // ========================================
    // –£–¢–ò–õ–ò–¢–´ –ó–ê–ì–†–£–ó–ö–ò
    // ========================================

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
     * @param {string} src - –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
     * @param {number} attempt - –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
     */
    function loadScript(src, attempt = 1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø—Ä–æ–º–∏—Å–æ–≤
        if (LoaderState.loadingPromises.has(src)) {
            return LoaderState.loadingPromises.get(src);
        }

        const promise = new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
            const existingScript = document.querySelector(`script[src="${src}"]`);
            if (existingScript && LoaderState.loadedModules.has(src)) {
                console.log(`‚úÖ Script already loaded: ${src}`);
                resolve(src);
                return;
            }

            console.log(`üì• Loading script (attempt ${attempt}): ${src}`);

            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = src;
            script.async = false; // –í–∞–∂–Ω–æ: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞

            // –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            const timeoutId = setTimeout(() => {
                script.onerror();
            }, MATRIX_CONFIG.timeout);

            script.onload = () => {
                clearTimeout(timeoutId);
                LoaderState.loadedModules.add(src);
                console.log(`‚úÖ Script loaded successfully: ${src}`);
                resolve(src);
            };

            script.onerror = async () => {
                clearTimeout(timeoutId);

                // –£–¥–∞–ª—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
                if (script.parentNode) {
                    script.parentNode.removeChild(script);
                }

                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                if (attempt < MATRIX_CONFIG.retries) {
                    console.warn(`‚ö†Ô∏è Retrying script load (${attempt + 1}/${MATRIX_CONFIG.retries}): ${src}`);

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    await new Promise(r => setTimeout(r, MATRIX_CONFIG.retryDelay * attempt));

                    try {
                        const result = await loadScript(src, attempt + 1);
                        resolve(result);
                    } catch (error) {
                        reject(error);
                    }
                } else {
                    const error = new Error(`Failed to load script after ${MATRIX_CONFIG.retries} attempts: ${src}`);
                    LoaderState.errors.push({ src, error: error.message });
                    console.error(`‚ùå ${error.message}`);
                    reject(error);
                }
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ DOM
            document.head.appendChild(script);
        });

        LoaderState.loadingPromises.set(src, promise);
        return promise;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
     */
    async function loadModules() {
        console.log(`üì¶ Loading ${MATRIX_CONFIG.modules.length} matrix modules...`);

        const results = [];

        for (const module of MATRIX_CONFIG.modules) {
            try {
                const fullPath = MATRIX_CONFIG.basePath + module;
                const result = await loadScript(fullPath);
                results.push({ module, success: true, path: fullPath });
            } catch (error) {
                console.error(`‚ùå Failed to load module: ${module}`, error);
                results.push({ module, success: false, error: error.message });
            }
        }

        return results;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
     */
    function checkDependencies() {
        console.log('üîç Checking dependencies...');

        const missing = [];

        for (const dep of MATRIX_CONFIG.dependencies) {
            if (!window[dep]) {
                missing.push(dep);
                console.error(`‚ùå Missing dependency: ${dep}`);
            } else {
                console.log(`‚úÖ Dependency available: ${dep}`);
            }
        }

        if (missing.length > 0) {
            throw new Error(`Missing required dependencies: ${missing.join(', ')}`);
        }

        console.log('‚úÖ All dependencies available');
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
     */
    function checkModulesLoaded() {
        console.log('üîç Checking matrix modules...');

        const requiredModules = [
            'MatrixServices',
            'MatrixOrganizer',
            'MatrixRenderer',
            'MatrixEvents',
            'MatrixPage'
        ];

        const missing = [];

        for (const moduleName of requiredModules) {
            if (!window[moduleName]) {
                missing.push(moduleName);
                console.error(`‚ùå Module not loaded: ${moduleName}`);
            } else {
                console.log(`‚úÖ Module loaded: ${moduleName}`);
            }
        }

        if (missing.length > 0) {
            throw new Error(`Matrix modules not loaded: ${missing.join(', ')}`);
        }

        console.log('‚úÖ All matrix modules loaded');
        return true;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    function showLoadingStatus(message, type = 'info') {
        const statusColors = {
            info: '#2196F3',
            success: '#4CAF50',
            warning: '#FF9800',
            error: '#F44336'
        };

        console.log(`%c[Matrix Loader] ${message}`,
            `color: ${statusColors[type]}; font-weight: bold;`);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≥—Ä—É–∑–∫–µ
     */
    function generateLoadReport(results) {
        const loadTime = Date.now() - LoaderState.startTime;
        const successful = results.filter(r => r.success).length;
        const failed = results.filter(r => !r.success).length;

        const report = {
            totalModules: results.length,
            successful,
            failed,
            loadTime,
            errors: LoaderState.errors,
            modules: results
        };

        console.group('üìä Matrix Loader Report');
        console.log(`Total modules: ${report.totalModules}`);
        console.log(`‚úÖ Successful: ${report.successful}`);
        console.log(`‚ùå Failed: ${report.failed}`);
        console.log(`‚è±Ô∏è Load time: ${report.loadTime}ms`);

        if (report.errors.length > 0) {
            console.group('‚ùå Errors:');
            report.errors.forEach(error => {
                console.error(`- ${error.src}: ${error.error}`);
            });
            console.groupEnd();
        }

        console.groupEnd();

        return report;
    }

    // ========================================
    // –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
    // ========================================

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã
     */
    async function initializeMatrixPage() {
        try {
            showLoadingStatus('Starting Matrix Page initialization...', 'info');

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            checkDependencies();

            // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
            const results = await loadModules();

            // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            const report = generateLoadReport(results);

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
            if (report.failed > 0) {
                throw new Error(`Failed to load ${report.failed} module(s)`);
            }

            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª–µ–π
            checkModulesLoaded();

            // 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MatrixPage
            if (window.MatrixPage && typeof window.MatrixPage.init === 'function') {
                showLoadingStatus('Initializing MatrixPage...', 'info');
                // MatrixPage —Å–∞–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è index.js
                showLoadingStatus('MatrixPage initialized successfully', 'success');
            } else {
                throw new Error('MatrixPage module not found or init method missing');
            }

            showLoadingStatus(`Matrix Page loaded successfully in ${report.loadTime}ms`, 'success');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
            window.MatrixPageLoader = {
                version: '10.1.0',
                loadTime: report.loadTime,
                modules: report.modules,
                loaded: true
            };

            return true;

        } catch (error) {
            showLoadingStatus(`Matrix Page initialization failed: ${error.message}`, 'error');
            console.error('‚ùå Matrix Page Loader Error:', error);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (window.Notifications) {
                Notifications.show(
                    `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã: ${error.message}`,
                    'error',
                    { duration: 10000, persistent: true }
                );
            }

            throw error;
        }
    }

    // ========================================
    // –ê–í–¢–û–ó–ê–ü–£–°–ö
    // ========================================

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
     */
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            initializeMatrixPage().catch(error => {
                console.error('Failed to initialize Matrix Page:', error);
            });
        });
    } else {
        // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        initializeMatrixPage().catch(error => {
            console.error('Failed to initialize Matrix Page:', error);
        });
    }

    // ========================================
    // –≠–ö–°–ü–û–†–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    // ========================================

    window.MatrixLoader = {
        loadScript,
        loadModules,
        checkDependencies,
        checkModulesLoaded,
        getState: () => ({ ...LoaderState }),
        reinitialize: initializeMatrixPage
    };

    console.log('‚úÖ Matrix Page Loader module ready');

})();