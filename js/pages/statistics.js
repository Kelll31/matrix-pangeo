/**
 * =============================================================================
 * STATISTICS PAGE MODULE - ULTIMATE VERSION WITH EXISTING STYLES
 * MITRE ATT&CK Matrix Application v10.1
 * =============================================================================
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï CSS-–∫–ª–∞—Å—Å—ã –∏–∑:
 * - components.css: .stat-card, .empty-state, .loading-spinner
 * - pages.css: .statistics-grid, .statistics-card
 * - layout.css: .content-section, .content-header
 * 
 * @author Storm Labs
 * @version 10.1.3-ULTIMATE
 * @date 2025-10-13
 */

const Statistics = {
    // =========================================================================
    // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    // =========================================================================

    config: {
        refreshInterval: 300000, // 5 –º–∏–Ω—É—Ç
        coverageThresholds: {
            excellent: 80,
            good: 60,
            medium: 40,
            low: 0
        }
    },

    // =========================================================================
    // –°–û–°–¢–û–Ø–ù–ò–ï
    // =========================================================================

    state: {
        isLoading: false,
        lastUpdate: null,
        refreshTimer: null,
        statistics: null
    },

    // =========================================================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // =========================================================================

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async load() {
        console.log('üìä Loading Statistics page...');

        if (this.state.isLoading) {
            console.warn('‚ö†Ô∏è Statistics page is already loading');
            return;
        }

        try {
            this.state.isLoading = true;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingState();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadStatistics();

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
            this.state.lastUpdate = new Date();

            console.log('‚úÖ Statistics page loaded successfully');
        } catch (error) {
            console.error('‚ùå Statistics page load error:', error);
            this.handleLoadError(error);
        } finally {
            this.state.isLoading = false;
        }
    },

    /**
     * –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    unload() {
        console.log('üìä Unloading Statistics page...');

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (this.state.refreshTimer) {
            clearInterval(this.state.refreshTimer);
            this.state.refreshTimer = null;
        }

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.statistics = null;
        this.state.lastUpdate = null;

        console.log('‚úÖ Statistics page unloaded');
    },

    // =========================================================================
    // –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
    // =========================================================================

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async loadStatistics() {
        try {
            console.log('üìä Fetching statistics data from API...');

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç API
            const response = await API.getStatistics();

            if (!response || !response.success) {
                throw new Error(response?.message || 'Failed to load statistics');
            }

            console.log('‚úÖ Statistics data received:', response.data);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.state.statistics = response.data;

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.renderStatistics(response.data);

        } catch (error) {
            console.error('‚ùå Failed to load statistics:', error);
            throw error;
        }
    },

    // =========================================================================
    // –û–¢–†–ò–°–û–í–ö–ê (–ò–°–ü–û–õ–¨–ó–£–ï–¢ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï CSS-–ö–õ–ê–°–°–´!)
    // =========================================================================

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    renderStatistics(data) {
        console.log('üé® Rendering statistics with existing CSS classes...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = document.getElementById('statisticsContent');
        if (!container) {
            console.error('‚ùå Statistics container not found!');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (!data || !data.overview) {
            console.warn('‚ö†Ô∏è No overview data available');
            container.innerHTML = this.renderEmptyState();
            return;
        }

        const overview = data.overview;

        // –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π HTML –∏—Å–ø–æ–ª—å–∑—É—è –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –∫–ª–∞—Å—Å—ã
        container.innerHTML = `
            <!-- Stats Grid - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç .stats-grid –∏–∑ components.css -->
            <div class="stats-grid">
                ${this.renderStatsCards(overview)}
            </div>

            <!-- Statistics Cards Grid - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç .statistics-grid –∏–∑ pages.css -->
            <div class="statistics-grid" style="margin-top: 2rem;">
                ${this.renderCoverageCard(overview)}
                ${this.renderDetailsCard(overview)}
            </div>
        `;

        console.log('‚úÖ Statistics rendered with existing styles');
    },

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ò–°–ü–û–õ–¨–ó–£–ï–¢ .stat-card –∏–∑ components.css!)
     */
    renderStatsCards(overview) {
        const cards = [
            {
                icon: 'fa-shield-alt',
                value: overview.total_techniques || overview.active_techniques || 0,
                label: '–í—Å–µ–≥–æ —Ç–µ—Ö–Ω–∏–∫',
                color: 'blue' // .stat-card-blue
            },
            {
                icon: 'fa-check-circle',
                value: overview.covered_techniques || 0,
                label: '–ü–æ–∫—Ä—ã—Ç–æ –ø—Ä–∞–≤–∏–ª–∞–º–∏',
                color: 'green' // .stat-card-green
            },
            {
                icon: 'fa-exclamation-triangle',
                value: overview.partially_covered || 0,
                label: '–ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–∫—Ä—ã—Ç–æ',
                color: 'orange' // .stat-card-orange
            },
            {
                icon: 'fa-times-circle',
                value: overview.uncovered_techniques || 0,
                label: '–ù–µ –ø–æ–∫—Ä—ã—Ç–æ',
                color: 'red' // .stat-card-red
            },
            {
                icon: 'fa-code-branch',
                value: overview.total_rules || overview.active_rules || 0,
                label: '–ü—Ä–∞–≤–∏–ª –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏',
                color: 'blue' // .stat-card-blue
            },
            {
                icon: 'fa-layer-group',
                value: overview.total_tactics || 0,
                label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–∫—Ç–∏–∫',
                color: 'blue' // .stat-card-blue
            }
        ];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –∫–ª–∞—Å—Å—ã: .stat-card, .stat-card-icon, .stat-card-content, .stat-card-value, .stat-card-label
        return cards.map(card => `
            <div class="stat-card stat-card-${card.color}">
                <div class="stat-card-icon">
                    <i class="fas ${card.icon}"></i>
                </div>
                <div class="stat-card-content">
                    <div class="stat-card-value">${card.value}</div>
                    <div class="stat-card-label">${card.label}</div>
                </div>
            </div>
        `).join('');
    },

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è (–ò–°–ü–û–õ–¨–ó–£–ï–¢ .statistics-card –∏–∑ pages.css!)
     */
    renderCoverageCard(overview) {
        const coveragePercent = Math.round(overview.coverage_percentage || 0);
        const coverageClass = this.getCoverageLevelClass(coveragePercent);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –∫–ª–∞—Å—Å—ã: .statistics-card, .statistics-card-header, .statistics-card-title
        return `
            <div class="statistics-card">
                <div class="statistics-card-header">
                    <h3 class="statistics-card-title">
                        <i class="fas fa-chart-pie"></i>
                        –ü–æ–∫—Ä—ã—Ç–∏–µ MITRE ATT&CK
                    </h3>
                    <span class="rule-status ${coverageClass}" style="font-size: 0.875rem;">
                        ${coveragePercent}%
                    </span>
                </div>

                <div class="statistics-card-body" style="height: auto; display: block; background: transparent; padding: 1rem;">
                    <!-- Progress Bar -->
                    <div style="margin: 1rem 0; height: 40px; background: var(--bg-tertiary); border-radius: 20px; overflow: hidden;">
                        <div class="coverage-bar ${coverageClass}" 
                             style="width: ${coveragePercent}%; height: 100%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; transition: width 0.5s ease;">
                            ${coveragePercent}%
                        </div>
                    </div>

                    <!-- Legend -->
                    <div style="display: flex; gap: 2rem; margin-top: 1rem; flex-wrap: wrap;">
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="width: 12px; height: 12px; border-radius: 50%; background: var(--color-success);"></span>
                            <span style="font-size: 0.875rem; color: var(--text-secondary);">
                                –ü–æ–∫—Ä—ã—Ç–æ: ${overview.covered_techniques || 0}
                            </span>
                        </div>
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="width: 12px; height: 12px; border-radius: 50%; background: var(--color-warning);"></span>
                            <span style="font-size: 0.875rem; color: var(--text-secondary);">
                                –ß–∞—Å—Ç–∏—á–Ω–æ: ${overview.partially_covered || 0}
                            </span>
                        </div>
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="width: 12px; height: 12px; border-radius: 50%; background: var(--color-error);"></span>
                            <span style="font-size: 0.875rem; color: var(--text-secondary);">
                                –ù–µ –ø–æ–∫—Ä—ã—Ç–æ: ${overview.uncovered_techniques || 0}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    },

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–µ—Ç–∞–ª–µ–π (–ò–°–ü–û–õ–¨–ó–£–ï–¢ .statistics-card –∏–∑ pages.css!)
     */
    renderDetailsCard(overview) {
        const details = [
            {
                label: '–í—Å–µ–≥–æ —Ç–µ—Ö–Ω–∏–∫',
                value: overview.total_techniques || 0,
                icon: 'fa-shield-alt'
            },
            {
                label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫',
                value: overview.active_techniques || 0,
                icon: 'fa-check'
            },
            {
                label: '–ü–æ–∫—Ä—ã—Ç–æ –ø—Ä–∞–≤–∏–ª–∞–º–∏',
                value: overview.covered_techniques || 0,
                icon: 'fa-check-circle',
                color: 'var(--color-success)'
            },
            {
                label: '–ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–∫—Ä—ã—Ç–æ',
                value: overview.partially_covered || 0,
                icon: 'fa-exclamation-triangle',
                color: 'var(--color-warning)'
            },
            {
                label: '–ù–µ –ø–æ–∫—Ä—ã—Ç–æ',
                value: overview.uncovered_techniques || 0,
                icon: 'fa-times-circle',
                color: 'var(--color-error)'
            },
            {
                label: '–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª',
                value: overview.total_rules || 0,
                icon: 'fa-code-branch'
            },
            {
                label: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª',
                value: overview.active_rules || 0,
                icon: 'fa-toggle-on'
            },
            {
                label: '–í—Å–µ–≥–æ —Ç–∞–∫—Ç–∏–∫',
                value: overview.total_tactics || 0,
                icon: 'fa-layer-group'
            }
        ];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –∫–ª–∞—Å—Å—ã: .statistics-card
        return `
            <div class="statistics-card">
                <div class="statistics-card-header">
                    <h3 class="statistics-card-title">
                        <i class="fas fa-list-ul"></i>
                        –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    </h3>
                </div>

                <div class="statistics-card-body" style="height: auto; display: block; background: transparent; padding: 0;">
                    <table style="width: 100%; border-collapse: collapse;">
                        <tbody>
                            ${details.map(detail => `
                                <tr style="border-bottom: 1px solid var(--border-color);">
                                    <td style="padding: 1rem; display: flex; align-items: center; gap: 0.5rem;">
                                        <i class="fas ${detail.icon}" style="width: 20px; text-align: center; color: ${detail.color || 'var(--text-muted)'};"></i>
                                        <span style="color: var(--text-secondary);">${detail.label}</span>
                                    </td>
                                    <td style="padding: 1rem; text-align: right; font-weight: bold; color: var(--text-primary);">
                                        ${detail.value}
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        `;
    },

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ò–°–ü–û–õ–¨–ó–£–ï–¢ .empty-state –∏–∑ components.css!)
     */
    renderEmptyState() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –∫–ª–∞—Å—Å—ã: .empty-state, .empty-state-icon, .empty-state-title, .empty-state-description
        return `
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <h3 class="empty-state-title">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h3>
                <p class="empty-state-description">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
                <button class="btn btn-primary" onclick="Statistics.refresh()">
                    <i class="fas fa-sync-alt"></i>
                    –û–±–Ω–æ–≤–∏—Ç—å
                </button>
            </div>
        `;
    },

    // =========================================================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // =========================================================================

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–ò–°–ü–û–õ–¨–ó–£–ï–¢ .loading-spinner –∏–∑ components.css!)
     */
    showLoadingState() {
        const container = document.getElementById('statisticsContent');

        if (container) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –∫–ª–∞—Å—Å: .loading-spinner
            container.innerHTML = `
                <div class="loading-spinner large">
                    <i class="fas fa-spinner"></i>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
                </div>
            `;
        }
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    handleLoadError(error) {
        console.error('‚ùå Statistics load error:', error);

        const container = document.getElementById('statisticsContent');

        if (container) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon" style="color: var(--color-error);">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h3 class="empty-state-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h3>
                    <p class="empty-state-description">${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}</p>
                    <button class="btn btn-primary" onclick="Statistics.load()">
                        <i class="fas fa-redo"></i>
                        –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                    </button>
                </div>
            `;
        }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å —É—Ä–æ–≤–Ω—è –ø–æ–∫—Ä—ã—Ç–∏—è
     */
    getCoverageLevelClass(percent) {
        if (percent >= this.config.coverageThresholds.excellent) {
            return 'active'; // –∑–µ–ª—ë–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç .rule-status.active
        } else if (percent >= this.config.coverageThresholds.good) {
            return 'active'; // –∑–µ–ª—ë–Ω—ã–π
        } else if (percent >= this.config.coverageThresholds.medium) {
            return 'warning'; // –∂—ë–ª—Ç—ã–π - –Ω—É–∂–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å
        } else {
            return 'inactive'; // –∫—Ä–∞—Å–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç .rule-status.inactive
        }
    },

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    async refresh() {
        console.log('üîÑ Refreshing statistics...');

        try {
            await this.load();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (typeof Notification !== 'undefined' && Notification.success) {
                Notification.success('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            }
        } catch (error) {
            console.error('‚ùå Refresh error:', error);

            if (typeof Notification !== 'undefined' && Notification.error) {
                Notification.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }
        }
    },

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async exportData(format = 'json') {
        console.log(`üì• Exporting statistics as ${format}...`);

        if (!this.state.statistics) {
            console.warn('‚ö†Ô∏è No statistics data to export');
            return;
        }

        try {
            if (format === 'json') {
                const data = JSON.stringify(this.state.statistics, null, 2);
                this.downloadFile(data, `statistics_${Date.now()}.json`, 'application/json');
            } else if (format === 'csv') {
                const overview = this.state.statistics.overview || {};
                const csv = this.convertToCSV(overview);
                this.downloadFile(csv, `statistics_${Date.now()}.csv`, 'text/csv');
            }

            console.log('‚úÖ Export completed');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (typeof Notification !== 'undefined' && Notification.success) {
                Notification.success(`–≠–∫—Å–ø–æ—Ä—Ç –≤ ${format.toUpperCase()} –∑–∞–≤–µ—Ä—à—ë–Ω`);
            }
        } catch (error) {
            console.error('‚ùå Export error:', error);

            if (typeof Notification !== 'undefined' && Notification.error) {
                Notification.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
            }
        }
    },

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV
     */
    convertToCSV(data) {
        const rows = [];
        rows.push('–ü–∞—Ä–∞–º–µ—Ç—Ä,–ó–Ω–∞—á–µ–Ω–∏–µ');

        for (const [key, value] of Object.entries(data)) {
            rows.push(`"${key}","${value}"`);
        }

        return rows.join('\n');
    },

    /**
     * –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
     */
    downloadFile(content, filename, mimeType) {
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        URL.revokeObjectURL(url);
    }
};

// =============================================================================
// –≠–ö–°–ü–û–†–¢
// =============================================================================

window.Statistics = Statistics;

console.log('‚úÖ Statistics module loaded');
