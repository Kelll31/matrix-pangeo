/**
 * =============================================================================
 * NAVBAR CONTROLLER v1.2
 * =============================================================================
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª—å—é: –ø–æ–∏—Å–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –¥–µ–π—Å—Ç–≤–∏—è, –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * @version 1.2.0
 * @date 2025-10-24
 */

const NavbarController = {
    // ========================================
    // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    // ========================================

    config: {
        searchMinLength: 2,
        searchDebounceDelay: 300,
        animationDuration: 200,
        logoutApiUrl: 'http://172.30.250.199:5000/api/users/logout',
        checkAuthApiUrl: 'http://172.30.250.199:5000/api/users/check-auth',
        loginPageUrl: '/login.html'
    },

    // ========================================
    // –°–û–°–¢–û–Ø–ù–ò–ï
    // ========================================

    state: {
        sidebarOpen: true,
        userMenuOpen: false,
        searchActive: false,
        searchQuery: '',
        searchResults: [],
        searchDebounceTimer: null,
        initialized: false,
        currentUser: null
    },

    // ========================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // ========================================

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    async init() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (this.state.initialized) {
            console.log('‚ö†Ô∏è Navbar Controller already initialized');
            return;
        }

        console.log('üéØ Initializing Navbar Controller...');

        this.cacheElements();
        this.bindEvents();
        this.initializeSidebar();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await this.loadUserInfo();

        this.updateStats();

        this.state.initialized = true;
        console.log('‚úÖ Navbar Controller initialized');
    },

    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    cacheElements() {
        this.elements = {
            // Sidebar toggle
            sidebarToggle: document.getElementById('sidebarToggle'),
            sidebar: document.querySelector('.sidebar'),
            mainContent: document.querySelector('.main-content'),

            // Search
            searchContainer: document.querySelector('.search-container'),
            searchInput: document.getElementById('globalSearch'),
            searchBtn: document.querySelector('.search-btn'),

            // Stats
            totalTechniques: document.getElementById('navTotalTechniques'),
            totalRules: document.getElementById('navTotalRules'),

            // Actions
            downloadBtn: document.getElementById('downloadBtn'),
            refreshBtn: document.getElementById('refreshBtn'),

            // User menu
            userMenuBtn: document.getElementById('userMenuBtn'),
            userDropdown: document.getElementById('userDropdown'),
            userNameElement: document.querySelector('.navbar-user-name'),
            logoutLinks: document.querySelectorAll('.dropdown-item')
        };
    },

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // Sidebar toggle
        if (this.elements.sidebarToggle) {
            this.elements.sidebarToggle.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.toggleSidebar();
            }, false);
        }

        // Search
        if (this.elements.searchInput) {
            this.elements.searchInput.addEventListener('input', (e) => this.handleSearchInput(e), false);
            this.elements.searchInput.addEventListener('focus', () => this.handleSearchFocus(), false);
            this.elements.searchInput.addEventListener('blur', () => this.handleSearchBlur(), false);
            this.elements.searchInput.addEventListener('keydown', (e) => this.handleSearchKeydown(e), false);
        }

        if (this.elements.searchBtn) {
            this.elements.searchBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleSearch();
            }, false);
        }

        // Actions
        if (this.elements.downloadBtn) {
            this.elements.downloadBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.handleDownload();
            }, false);
        }

        if (this.elements.refreshBtn) {
            this.elements.refreshBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.handleRefresh();
            }, false);
        }

        // User menu
        if (this.elements.userMenuBtn) {
            this.elements.userMenuBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.toggleUserMenu(e);
            }, false);
        }

        // Logout button
        this.bindLogoutEvent();

        // Close dropdowns on outside click
        document.addEventListener('click', (e) => this.handleOutsideClick(e), false);

        // Keyboard shortcuts - –∏—Å–ø–æ–ª—å–∑—É–µ–º capture phase –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e), true);

        // Window resize
        window.addEventListener('resize', () => this.handleResize(), false);
    },

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è logout –∫ –∫–Ω–æ–ø–∫–µ –≤—ã—Ö–æ–¥–∞
     */
    bindLogoutEvent() {
        if (this.elements.logoutLinks) {
            this.elements.logoutLinks.forEach(link => {
                const linkText = link.querySelector('span');
                if (linkText && linkText.textContent.trim() === '–í—ã—Ö–æ–¥') {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        this.handleLogout();
                    }, false);
                }
            });
        }
    },

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è sidebar –∏–∑ localStorage
     */
    initializeSidebar() {
        const savedState = localStorage.getItem('sidebarOpen');
        if (savedState !== null) {
            this.state.sidebarOpen = savedState === 'true';
            this.applySidebarState();
        }
    },

    // ========================================
    // –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
    // ========================================

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ API
     */
    async loadUserInfo() {
        const token = localStorage.getItem('authToken');

        if (!token) {
            console.warn('‚ö†Ô∏è No auth token found');
            return;
        }

        try {
            const response = await fetch(this.config.checkAuthApiUrl, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            const data = await response.json();

            if (response.ok && data.success && data.data.authenticated) {
                const user = data.data.user;
                this.state.currentUser = user;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
                localStorage.setItem('user', JSON.stringify(user));
                localStorage.setItem('username', user.username);
                localStorage.setItem('email', user.email);
                localStorage.setItem('role', user.role);

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.displayUserName(user);

                console.log('üë§ User loaded:', user);
            } else {
                console.warn('‚ö†Ô∏è User not authenticated');
            }

        } catch (error) {
            console.error('‚ùå Error loading user info:', error);
        }
    },

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ navbar
     */
    displayUserName(user) {
        if (!this.elements.userNameElement) {
            console.warn('‚ö†Ô∏è User name element not found');
            return;
        }

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: full_name > username
        const displayName = user.full_name || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        this.elements.userNameElement.textContent = displayName;

        console.log(`‚úÖ User name displayed: ${displayName}`);
    },

    // ========================================
    // SIDEBAR –£–ü–†–ê–í–õ–ï–ù–ò–ï
    // ========================================

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ sidebar
     */
    toggleSidebar() {
        this.state.sidebarOpen = !this.state.sidebarOpen;
        this.applySidebarState();
        this.saveSidebarState();

        console.log(`üìÇ Sidebar ${this.state.sidebarOpen ? 'opened' : 'closed'}`);
    },

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è sidebar
     */
    applySidebarState() {
        const body = document.body;

        if (this.state.sidebarOpen) {
            body.classList.remove('sidebar-collapsed');
        } else {
            body.classList.add('sidebar-collapsed');
        }

        // Trigger resize event –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        setTimeout(() => {
            window.dispatchEvent(new Event('resize'));
        }, 50);
    },

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è sidebar
     */
    saveSidebarState() {
        localStorage.setItem('sidebarOpen', this.state.sidebarOpen);
    },

    // ========================================
    // –ü–û–ò–°–ö
    // ========================================

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫
     */
    handleSearchInput(e) {
        const query = e.target.value.trim();
        this.state.searchQuery = query;

        // Debounce search
        clearTimeout(this.state.searchDebounceTimer);

        if (query.length >= this.config.searchMinLength) {
            this.state.searchDebounceTimer = setTimeout(() => {
                this.performSearch(query);
            }, this.config.searchDebounceDelay);
        } else {
            this.clearSearchResults();
        }
    },

    /**
     * –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫–µ
     */
    handleSearchFocus() {
        this.state.searchActive = true;
        if (this.elements.searchContainer) {
            this.elements.searchContainer.classList.add('search-active');
        }
    },

    /**
     * –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞
     */
    handleSearchBlur() {
        setTimeout(() => {
            this.state.searchActive = false;
            if (this.elements.searchContainer) {
                this.elements.searchContainer.classList.remove('search-active');
            }
        }, 200);
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –≤ –ø–æ–∏—Å–∫–µ
     */
    handleSearchKeydown(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            this.performSearch(this.state.searchQuery);
        } else if (e.key === 'Escape') {
            e.preventDefault();
            this.clearSearch();
        }
    },

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    toggleSearch() {
        if (this.elements.searchInput) {
            this.elements.searchInput.focus();
        }
    },

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
     */
    async performSearch(query) {
        console.log(`üîç Searching for: "${query}"`);

        try {
            // TODO: Implement actual search API call
            // const results = await API.search(query);

            // Mock search results
            const results = await this.mockSearch(query);

            this.state.searchResults = results;
            this.displaySearchResults(results);

        } catch (error) {
            console.error('‚ùå Search error:', error);
            if (window.Notifications) {
                Notifications.show('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', 'error');
            }
        }
    },

    /**
     * Mock search (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)
     */
    async mockSearch(query) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve([
                    { type: 'technique', id: 'T1078', name: 'Valid Accounts' },
                    { type: 'tactic', id: 'TA0001', name: 'Initial Access' },
                    { type: 'rule', id: 'R001', name: 'Suspicious Login' }
                ]);
            }, 300);
        });
    },

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    displaySearchResults(results) {
        // TODO: Implement search results dropdown
        console.log('üìã Search results:', results);

        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ModalEngine –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (window.ModalEngine && results.length > 0) {
            const content = this.renderSearchResults(results);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ –∏–ª–∏ –º–æ–¥–∞–ª–∫–µ
        }
    },

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    renderSearchResults(results) {
        return results.map(result => `
            <div class="search-result-item" data-type="${result.type}" data-id="${result.id}">
                <div class="result-icon">
                    ${this.getResultIcon(result.type)}
                </div>
                <div class="result-info">
                    <div class="result-id">${result.id}</div>
                    <div class="result-name">${result.name}</div>
                </div>
            </div>
        `).join('');
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    getResultIcon(type) {
        const icons = {
            technique: 'üéØ',
            tactic: 'üìã',
            rule: 'üõ°Ô∏è'
        };
        return icons[type] || 'üìÑ';
    },

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    clearSearchResults() {
        this.state.searchResults = [];
        // TODO: Hide search results dropdown
    },

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    clearSearch() {
        if (this.elements.searchInput) {
            this.elements.searchInput.value = '';
            this.state.searchQuery = '';
            this.clearSearchResults();
            this.elements.searchInput.blur();
        }
    },

    // ========================================
    // –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    // ========================================

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async updateStats() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ MatrixServices
            if (window.MatrixServices) {
                const matrixData = await MatrixServices.fetchMatrix();
                const stats = matrixData.statistics;

                if (stats) {
                    this.displayStats(stats);
                }
            }
        } catch (error) {
            console.error('‚ùå Error updating stats:', error);
        }
    },

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    displayStats(stats) {
        const covered = stats?.overview?.coveredtechniques || stats?.coveredtechniques || 0;
        const total = stats?.overview?.totaltechniques || stats?.totaltechniques || 0;
        const rules = stats?.overview?.totalrules || stats?.totalrules || 0;

        if (this.elements.totalTechniques) {
            this.elements.totalTechniques.textContent = `${covered}/${total}`;
        }

        if (this.elements.totalRules) {
            this.elements.totalRules.textContent = rules;
        }

        console.log('üìä Stats updated:', { covered, total, rules });
    },

    // ========================================
    // –î–ï–ô–°–¢–í–ò–Ø
    // ========================================

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
     */
    handleDownload() {
        console.log('üì• Download requested');

        if (window.Notifications) {
            Notifications.show('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...', 'info');
        }

        // TODO: Implement export functionality
        setTimeout(() => {
            if (window.Notifications) {
                Notifications.show('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'warning');
            }
        }, 500);
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async handleRefresh() {
        console.log('üîÑ Refresh requested');

        const btn = this.elements.refreshBtn;
        if (btn) {
            btn.classList.add('rotating');
        }

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã
            if (window.MatrixApp && window.MatrixApp.loadMatrix) {
                await window.MatrixApp.loadMatrix();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.updateStats();

            if (window.Notifications) {
                Notifications.show('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            }

        } catch (error) {
            console.error('‚ùå Refresh error:', error);
            if (window.Notifications) {
                Notifications.show('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
            }
        } finally {
            if (btn) {
                setTimeout(() => btn.classList.remove('rotating'), 500);
            }
        }
    },

    // ========================================
    // –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    // ========================================

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    toggleUserMenu(e) {
        this.state.userMenuOpen = !this.state.userMenuOpen;

        if (this.elements.userDropdown) {
            if (this.state.userMenuOpen) {
                this.elements.userDropdown.classList.add('show');
            } else {
                this.elements.userDropdown.classList.remove('show');
            }
        }

        console.log(`üë§ User menu ${this.state.userMenuOpen ? 'opened' : 'closed'}`);
    },

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
     */
    handleOutsideClick(e) {
        if (this.state.userMenuOpen) {
            const userMenu = this.elements.userMenuBtn?.closest('.navbar-user');
            if (userMenu && !userMenu.contains(e.target)) {
                this.state.userMenuOpen = false;
                if (this.elements.userDropdown) {
                    this.elements.userDropdown.classList.remove('show');
                }
            }
        }
    },

    // ========================================
    // LOGOUT
    // ========================================

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ logout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleLogout() {
        console.log('üö™ Logout requested');

        const token = localStorage.getItem('authToken');

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
            const response = await fetch(this.config.logoutApiUrl, {
                method: 'POST',
                headers: {
                    'Authorization': token ? `Bearer ${token}` : '',
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            const data = await response.json();

            if (response.ok && data.success) {
                console.log('‚úÖ Logout successful:', data.data.message);

                if (window.Notifications) {
                    Notifications.show('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success');
                }
            } else {
                console.warn('‚ö†Ô∏è Logout API warning:', data.error);
            }

        } catch (error) {
            console.error('‚ùå Logout request failed:', error);

            if (window.Notifications) {
                Notifications.show('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞, –Ω–æ —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–∞', 'warning');
            }
        } finally {
            // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.clearUserSession();

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            setTimeout(() => {
                window.location.href = this.config.loginPageUrl;
            }, 500);
        }
    },

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
     */
    clearUserSession() {
        console.log('üßπ Clearing user session...');

        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.removeItem('authToken');
        localStorage.removeItem('user');
        localStorage.removeItem('username');
        localStorage.removeItem('email');
        localStorage.removeItem('role');

        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
        // localStorage.clear();

        // –û—á–∏—Å—Ç–∫–∞ sessionStorage
        sessionStorage.clear();

        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.state.currentUser = null;

        console.log('‚úÖ User session cleared');
    },

    // ========================================
    // KEYBOARD SHORTCUTS
    // ========================================

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    handleKeyboardShortcuts(e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –≤ input/textarea
        const target = e.target;
        if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
            return;
        }

        // Ctrl/Cmd + K - –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            e.stopPropagation();
            this.toggleSearch();
            return;
        }

        // Ctrl/Cmd + B - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å sidebar
        if ((e.ctrlKey || e.metaKey) && e.key === 'b') {
            e.preventDefault();
            e.stopPropagation();
            this.toggleSidebar();
            return;
        }

        // Ctrl/Cmd + R - –æ–±–Ω–æ–≤–∏—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        if ((e.ctrlKey || e.metaKey) && e.key === 'r' && e.shiftKey) {
            e.preventDefault();
            e.stopPropagation();
            this.handleRefresh();
            return;
        }
    },

    // ========================================
    // RESPONSIVE
    // ========================================

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        const width = window.innerWidth;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞—Ç—å sidebar –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (width < 768 && this.state.sidebarOpen) {
            this.state.sidebarOpen = false;
            this.applySidebarState();
        }
    },

    // ========================================
    // PUBLIC API
    // ========================================

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ navbar
     */
    showNotification(message, type = 'info') {
        if (window.Notifications) {
            Notifications.show(message, type);
        } else {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    },

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
     */
    setUserName(name) {
        if (this.elements.userNameElement) {
            this.elements.userNameElement.textContent = name;
        }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        return this.state.currentUser;
    },

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏
     */
    async refreshStats() {
        await this.updateStats();
    },

    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    async reloadUserInfo() {
        await this.loadUserInfo();
    },

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å logout (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    async logout() {
        await this.handleLogout();
    }
};

// ========================================
// AUTO INITIALIZATION
// ========================================

// –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∂–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
function initNavbarController() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const checkDependencies = () => {
        // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        return true;
    };

    if (checkDependencies()) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã MatrixRenderer —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å scroll sync
        setTimeout(() => {
            NavbarController.init();
        }, 100);
    } else {
        console.warn('‚ö†Ô∏è Navbar Controller dependencies not ready, retrying...');
        setTimeout(initNavbarController, 200);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initNavbarController);
} else if (document.readyState === 'interactive' || document.readyState === 'complete') {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    initNavbarController();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.NavbarController = NavbarController;

console.log('‚úÖ Navbar Controller v1.2 loaded');
