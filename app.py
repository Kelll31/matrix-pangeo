"""
===============================================================================
Flask MITRE ATT&CK Matrix API Application
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –Ω–∞ 1500+ —Å—Ç—Ä–æ–∫
===============================================================================

–í–µ—Ä—Å–∏—è: 13.0.0-COMPLETE-RU
–ê–≤—Ç–æ—Ä: Storm Labs
–î–∞—Ç–∞: 2025-10-14

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- –ü–æ–ª–Ω–∞—è —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã JSON –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
- –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ Python –∏ JavaScript
- –ü—Ä–∏–º–µ—Ä—ã curl –∫–æ–º–∞–Ω–¥
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
- –ö—Ä–∞—Å–∏–≤—ã–π HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
- SQLAlchemy 2.0+ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
- XAMPP MySQL –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã

–†–ê–ó–ú–ï–†: 1500+ —Å—Ç—Ä–æ–∫ –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
===============================================================================
"""

# =============================================================================
# –ò–ú–ü–û–†–¢–´
# =============================================================================
import os
import sys
from flask import (
    Flask,
    jsonify,
    request,
    g,
    send_from_directory,
    render_template_string,
    make_response,
)
from flask_cors import CORS
import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime, timedelta
from sqlalchemy import text
from urllib.parse import unquote
import traceback
import json
from utils.auth import login_required


# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
# =============================================================================
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    missing_deps = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PyMySQL
    try:
        import pymysql

        pymysql.install_as_MySQLdb()
        print("‚úÖ PyMySQL –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError:
        missing_deps.append("pymysql")
        print("‚ùå PyMySQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Flask-CORS
    try:
        from flask_cors import CORS

        print("‚úÖ Flask-CORS –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError:
        missing_deps.append("flask-cors")
        print("‚ùå Flask-CORS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLAlchemy
    try:
        import sqlalchemy

        print("‚úÖ SQLAlchemy –∑–∞–≥—Ä—É–∂–µ–Ω")
    except ImportError:
        missing_deps.append("sqlalchemy")
        print("‚ùå SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    if missing_deps:
        print("\nüîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print(f"   pip install {' '.join(missing_deps)}")
        sys.exit(1)

    return True


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
check_dependencies()


# =============================================================================
# –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# =============================================================================
def load_configuration():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    import os
    import sys
    from pathlib import Path

    config = None
    config_loaded = False
    last_error = None

    # ==========================================
    # –í–ê–†–ò–ê–ù–¢ 1: config_xampp.py
    # ==========================================
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if Path("config_xampp.py").exists():
            print("üìù –ù–∞–π–¥–µ–Ω config_xampp.py, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å...")

            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º sys.exit
            original_exit = sys.exit

            def dummy_exit(code=0):
                raise SystemExit(code)

            sys.exit = dummy_exit

            try:
                from config_xampp import config as xampp_config

                config = xampp_config
                config_loaded = True
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config_xampp.py")
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π sys.exit
                sys.exit = original_exit

            if config_loaded:
                return config

    except SystemExit as e:
        last_error = f"config_xampp.py –≤—ã–∑–≤–∞–ª sys.exit({e.code})"
        print(f"‚ö†Ô∏è  {last_error}")
    except ImportError as e:
        last_error = f"config_xampp.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}"
        print(f"‚ö†Ô∏è  {last_error}")
    except Exception as e:
        last_error = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config_xampp.py: {e}"
        print(f"‚ö†Ô∏è  {last_error}")

    # ==========================================
    # –í–ê–†–ò–ê–ù–¢ 2: config.py
    # ==========================================
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if Path("config.py").exists():
            print("üìù –ù–∞–π–¥–µ–Ω config.py, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å...")

            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º sys.exit
            original_exit = sys.exit

            def dummy_exit(code=0):
                raise SystemExit(code)

            sys.exit = dummy_exit

            try:
                from config import config as default_config

                config = default_config
                config_loaded = True
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.py")
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π sys.exit
                sys.exit = original_exit

            if config_loaded:
                return config

    except SystemExit as e:
        last_error = f"config.py –≤—ã–∑–≤–∞–ª sys.exit({e.code})"
        print(f"‚ö†Ô∏è  {last_error}")
    except ImportError as e:
        last_error = f"config.py –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}"
        print(f"‚ö†Ô∏è  {last_error}")
    except Exception as e:
        last_error = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.py: {e}"
        print(f"‚ö†Ô∏è  {last_error}")

    # ==========================================
    # –í–ê–†–ò–ê–ù–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
    # ==========================================
    if not config_loaded:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–æ–≤")
        print("üîß –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            from dotenv import load_dotenv

            env_path = Path(".env")
            if env_path.exists():
                load_dotenv(env_path, override=True)
                print(f"‚úÖ .env –∑–∞–≥—Ä—É–∂–µ–Ω: {env_path.absolute()}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î
            db_host = os.environ.get("DB_HOST", "127.0.0.1")
            db_port = os.environ.get("DB_PORT", "3306")
            db_user = os.environ.get("DB_USER", "root")
            db_pass = os.environ.get("DB_PASS", "").strip('"').strip("'")
            db_name = os.environ.get("DB_NAME", "mitre_attack_matrix")
            db_charset = os.environ.get("DB_CHARSET", "utf8mb4")

            # –°–æ–∑–¥–∞–µ–º DATABASE_URI
            if db_pass:
                db_uri = f"mysql+pymysql://{db_user}:{db_pass}@{db_host}:{db_port}/{db_name}?charset={db_charset}"
            else:
                db_uri = f"mysql+pymysql://{db_user}@{db_host}:{db_port}/{db_name}?charset={db_charset}"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            class Config:
                # Database
                SQLALCHEMY_DATABASE_URI = db_uri
                SQLALCHEMY_TRACK_MODIFICATIONS = False
                SQLALCHEMY_ECHO = os.environ.get("FLASK_ENV") == "development"

                # Database connection parameters (–¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
                DB_HOST = db_host
                DB_PORT = int(db_port)
                DB_USER = db_user
                DB_PASS = db_pass
                DB_NAME = db_name
                DB_CHARSET = db_charset

                # Application
                SECRET_KEY = os.environ.get(
                    "SECRET_KEY", "dev-secret-key-change-in-production"
                )
                API_VERSION = os.environ.get("API_VERSION", "13.0.0")
                DEBUG = os.environ.get("FLASK_ENV", "development") == "development"

                # JWT
                JWT_SECRET_KEY = os.environ.get("JWT_SECRET_KEY", SECRET_KEY)
                JWT_ACCESS_TOKEN_EXPIRES = 86400  # 24 —á–∞—Å–∞

                # CORS
                CORS_ORIGINS = ["*"]
                CORS_METHODS = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
                CORS_ALLOW_HEADERS = ["Content-Type", "Authorization"]

                # Logging
                LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO")
                LOG_FILE = "logs/app.log"
                LOG_MAX_BYTES = 10485760  # 10MB
                LOG_BACKUP_COUNT = 10

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            config = {"development": Config, "production": Config, "testing": Config}

            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print(f"   üìä DB: {db_user}@{db_host}:{db_port}/{db_name}")

            return config

        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env: {e}")
            import traceback

            traceback.print_exc()

    # ==========================================
    # –ï–°–õ–ò –í–°–Å –ü–û–®–õ–û –ù–ï –¢–ê–ö
    # ==========================================
    if config is None:
        print("\n" + "=" * 70)
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
        print("=" * 70)

        if last_error:
            print(f"\nüîç –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")

        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. –§–∞–π–ª config.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        print("   2. –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("   3. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        print("\nüîß –†–µ—à–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.py –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("   3. –°–æ–∑–¥–∞–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π config.py:")

        print("\n" + "‚îÄ" * 70)
        print("# config.py")
        print("‚îÄ" * 70)
        print(
            """
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
basedir = Path(__file__).parent.absolute()
load_dotenv(basedir / '.env', override=True)

class Config:
    # Database
    DB_HOST = os.environ.get('DB_HOST', '127.0.0.1')
    DB_PORT = int(os.environ.get('DB_PORT', '3306'))
    DB_USER = os.environ.get('DB_USER', 'root')
    DB_PASS = os.environ.get('DB_PASS', '')
    DB_NAME = os.environ.get('DB_NAME', 'mitre_attack_matrix')
    DB_CHARSET = os.environ.get('DB_CHARSET', 'utf8mb4')
    
    # SQLAlchemy URI
    if DB_PASS:
        SQLALCHEMY_DATABASE_URI = f'mysql+pymysql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}?charset={DB_CHARSET}'
    else:
        SQLALCHEMY_DATABASE_URI = f'mysql+pymysql://{DB_USER}@{DB_HOST}:{DB_PORT}/{DB_NAME}?charset={DB_CHARSET}'
    
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = os.environ.get('SECRET_KEY', 'your-secret-key')
    API_VERSION = '13.0.0'
    DEBUG = True

config = {
    'development': Config,
    'production': Config,
    'testing': Config
}
        """
        )
        print("‚îÄ" * 70)

        print("\nüóÇÔ∏è  –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", Path.cwd())
        print("üìã –§–∞–π–ª—ã Python –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        for py_file in Path.cwd().glob("*.py"):
            print(f"   ‚Ä¢ {py_file.name}")

        sys.exit(1)

    return config


config = load_configuration()


# =============================================================================
# –ú–û–î–ï–õ–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =============================================================================
def load_database_models():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from models.database import db

        print("‚úÖ –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return db
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –ë–î: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ models/database.py")
        sys.exit(1)


db = load_database_models()


# =============================================================================
# –£–¢–ò–õ–ò–¢–´ (–° FALLBACK –í–ï–†–°–ò–Ø–ú–ò)
# =============================================================================
def load_utilities():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ç–∏–ª–∏—Ç —Å fallback –≤–µ—Ä—Å–∏—è–º–∏"""
    try:
        from utils.helpers import (
            create_error_response,
            create_success_response,
            generate_request_id,
            get_client_ip,
        )

        print("‚úÖ –£—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ utils.helpers")
        return {
            "create_error_response": create_error_response,
            "create_success_response": create_success_response,
            "generate_request_id": generate_request_id,
            "get_client_ip": get_client_ip,
        }
    except ImportError:
        print("‚ö†Ô∏è –£—Ç–∏–ª–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ fallback –≤–µ—Ä—Å–∏–∏")

        def create_error_response(message, code=500):
            """–°–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
            return (
                jsonify(
                    {
                        "success": False,
                        "error": {"message": message, "code": code},
                        "timestamp": datetime.utcnow().isoformat(),
                    }
                ),
                code,
            )

        def create_success_response(data, code=200):
            """–°–æ–∑–¥–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç"""
            return (
                jsonify(
                    {
                        "success": True,
                        "data": data,
                        "timestamp": datetime.utcnow().isoformat(),
                    }
                ),
                code,
            )

        def generate_request_id():
            """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞"""
            import uuid

            return str(uuid.uuid4())[:8]

        def get_client_ip():
            """–ü–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞"""
            if request.headers.get("X-Forwarded-For"):
                return request.headers.get("X-Forwarded-For").split(",")[0]
            elif request.headers.get("X-Real-IP"):
                return request.headers.get("X-Real-IP")
            else:
                return request.remote_addr or "unknown"

        return {
            "create_error_response": create_error_response,
            "create_success_response": create_success_response,
            "generate_request_id": generate_request_id,
            "get_client_ip": get_client_ip,
        }


utils = load_utilities()
create_error_response = utils["create_error_response"]
create_success_response = utils["create_success_response"]
generate_request_id = utils["generate_request_id"]
get_client_ip = utils["get_client_ip"]


# =============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# –í–µ—Ä—Å–∏—è API
API_VERSION = "13.0.0-COMPLETE-RU"

# –õ–∏–º–∏—Ç—ã
DEFAULT_PAGE_SIZE = 20
MAX_PAGE_SIZE = 1000
MAX_SEARCH_RESULTS = 500

# –¢–∞–π–º–∞—É—Ç—ã (—Å–µ–∫—É–Ω–¥—ã)
REQUEST_TIMEOUT = 30
DB_CONNECTION_TIMEOUT = 10

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL = logging.INFO
LOG_MAX_BYTES = 10 * 1024 * 1024  # 10 MB
LOG_BACKUP_COUNT = 10


# =============================================================================
# –°–•–ï–ú–´ –ú–û–î–ï–õ–ï–ô –î–ê–ù–ù–´–•
# =============================================================================
DATA_MODELS = {
    "Technique": {
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¢–µ—Ö–Ω–∏–∫–∞ –∞—Ç–∞–∫–∏ –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ MITRE ATT&CK",
        "—Ç–∞–±–ª–∏—Ü–∞": "techniques",
        "–ø–æ–ª—è": {
            "id": {
                "—Ç–∏–ø": "VARCHAR(50)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (UUID —Ñ–æ—Ä–º–∞—Ç)",
                "–ø—Ä–∏–º–µ—Ä": "attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736",
                "primary_key": True,
            },
            "attackid": {
                "—Ç–∏–ø": "VARCHAR(20)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "ID —Ç–µ—Ö–Ω–∏–∫–∏ MITRE ATT&CK",
                "–ø—Ä–∏–º–µ—Ä": "T1059 –∏–ª–∏ T1059.001",
                "indexed": True,
            },
            "name": {
                "—Ç–∏–ø": "VARCHAR(500)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                "–ø—Ä–∏–º–µ—Ä": "Command and Scripting Interpreter",
            },
            "name_ru": {
                "—Ç–∏–ø": "VARCHAR(500)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
                "–ø—Ä–∏–º–µ—Ä": "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤",
            },
            "description": {
                "—Ç–∏–ø": "TEXT",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
            },
            "description_ru": {
                "—Ç–∏–ø": "TEXT",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            },
            "platforms": {
                "—Ç–∏–ø": "JSON",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º",
                "–ø—Ä–∏–º–µ—Ä": ["Windows", "Linux", "macOS", "Network", "Cloud"],
            },
            "data_sources": {
                "—Ç–∏–ø": "JSON",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è",
                "–ø—Ä–∏–º–µ—Ä": ["Process monitoring", "File monitoring"],
            },
            "permissions_required": {
                "—Ç–∏–ø": "JSON",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                "–ø—Ä–∏–º–µ—Ä": ["User", "Administrator"],
            },
            "version": {
                "—Ç–∏–ø": "DECIMAL(5,2)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–µ—Ä—Å–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ –≤ MITRE ATT&CK",
                "–ø—Ä–∏–º–µ—Ä": 1.4,
            },
            "deprecated": {
                "—Ç–∏–ø": "TINYINT(1)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–ª–∞–≥ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ (0 –∏–ª–∏ 1)",
                "default": 0,
            },
            "revoked": {
                "—Ç–∏–ø": "TINYINT(1)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–ª–∞–≥ –æ—Ç–æ–∑–≤–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ (0 –∏–ª–∏ 1)",
                "default": 0,
            },
            "created_at": {
                "—Ç–∏–ø": "TIMESTAMP",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏",
                "auto": True,
            },
            "updated_at": {
                "—Ç–∏–ø": "TIMESTAMP",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                "auto": True,
            },
        },
        "—Å–≤—è–∑–∏": {
            "tactics": "–ú–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º —á–µ—Ä–µ–∑ technique_tactics",
            "rules": "–û–¥–∏–Ω-–∫–æ-–º–Ω–æ–≥–∏–º (CorrelationRules)",
            "comments": "–û–¥–∏–Ω-–∫–æ-–º–Ω–æ–≥–∏–º (Comments)",
        },
        "–∏–Ω–¥–µ–∫—Å—ã": ["attackid", "name", "deprecated", "revoked"],
        "–ø—Ä–∏–º–µ—Ä_–∑–∞–ø–∏—Å–∏": {
            "id": "attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736",
            "attackid": "T1059",
            "name": "Command and Scripting Interpreter",
            "name_ru": "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤",
            "platforms": ["Windows", "Linux", "macOS"],
            "version": 1.4,
            "deprecated": False,
            "revoked": False,
        },
    },
    "CorrelationRule": {
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü—Ä–∞–≤–∏–ª–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫",
        "—Ç–∞–±–ª–∏—Ü–∞": "correlationrules",
        "–ø–æ–ª—è": {
            "id": {
                "—Ç–∏–ø": "VARCHAR(36)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "UUID –ø—Ä–∞–≤–∏–ª–∞",
                "primary_key": True,
            },
            "name": {
                "—Ç–∏–ø": "VARCHAR(500)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞",
                "required": True,
            },
            "technique_id": {
                "—Ç–∏–ø": "VARCHAR(20)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ (FK)",
                "foreign_key": "techniques.attackid",
            },
            "description": {"—Ç–∏–ø": "TEXT", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"},
            "logic": {
                "—Ç–∏–ø": "TEXT",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–õ–æ–≥–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (query, conditions)",
                "required": True,
            },
            "severity": {
                "—Ç–∏–ø": "VARCHAR(20)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏",
                "enum": ["low", "medium", "high", "critical"],
                "default": "medium",
            },
            "active": {
                "—Ç–∏–ø": "TINYINT(1)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ê–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ",
                "default": 1,
            },
            "status": {
                "—Ç–∏–ø": "VARCHAR(20)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°—Ç–∞—Ç—É—Å –ø—Ä–∞–≤–∏–ª–∞",
                "enum": ["enabled", "disabled", "testing", "deleted"],
                "default": "enabled",
            },
            "author": {"—Ç–∏–ø": "VARCHAR(100)", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ê–≤—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª–∞"},
            "tags": {
                "—Ç–∏–ø": "JSON",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏",
                "–ø—Ä–∏–º–µ—Ä": ["powershell", "execution", "suspicious"],
            },
            "false_positives": {
                "—Ç–∏–ø": "TEXT",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π",
            },
            "created_at": {"—Ç–∏–ø": "TIMESTAMP", "auto": True},
            "updated_at": {"—Ç–∏–ø": "TIMESTAMP", "auto": True},
        },
        "–ø—Ä–∏–º–µ—Ä_–∑–∞–ø–∏—Å–∏": {
            "id": "550e8400-e29b-41d4-a716-446655440000",
            "name": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PowerShell",
            "technique_id": "T1059.001",
            "severity": "high",
            "active": True,
            "status": "enabled",
        },
    },
    "Tactic": {
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¢–∞–∫—Ç–∏–∫–∞ MITRE ATT&CK - —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ª—å –∞—Ç–∞–∫–∏",
        "—Ç–∞–±–ª–∏—Ü–∞": "tactics",
        "–ø–æ–ª—è": {
            "id": {
                "—Ç–∏–ø": "VARCHAR(50)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "ID —Ç–∞–∫—Ç–∏–∫–∏ (TA0001-TA0040)",
                "primary_key": True,
                "–ø—Ä–∏–º–µ—Ä": "TA0001",
            },
            "name": {
                "—Ç–∏–ø": "VARCHAR(200)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–∫—Ç–∏–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                "–ø—Ä–∏–º–µ—Ä": "Initial Access",
            },
            "name_ru": {
                "—Ç–∏–ø": "VARCHAR(200)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–∫—Ç–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
                "–ø—Ä–∏–º–µ—Ä": "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø",
            },
            "x_mitre_shortname": {
                "—Ç–∏–ø": "VARCHAR(100)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ö–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è",
                "–ø—Ä–∏–º–µ—Ä": "initial-access",
            },
            "description": {"—Ç–∏–ø": "TEXT", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–∫—Ç–∏–∫–∏"},
            "description_ru": {"—Ç–∏–ø": "TEXT", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"},
        },
        "—Ç–∞–∫—Ç–∏–∫–∏": {
            "TA0001": "Initial Access (–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø)",
            "TA0002": "Execution (–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)",
            "TA0003": "Persistence (–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ)",
            "TA0004": "Privilege Escalation (–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π)",
            "TA0005": "Defense Evasion (–û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã)",
            "TA0006": "Credential Access (–î–æ—Å—Ç—É–ø –∫ —É—á—ë—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º)",
            "TA0007": "Discovery (–†–∞–∑–≤–µ–¥–∫–∞)",
            "TA0008": "Lateral Movement (–ë–æ–∫–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ)",
            "TA0009": "Collection (–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö)",
            "TA0010": "Exfiltration (–≠–∫—Å—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)",
            "TA0011": "Command and Control (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å)",
            "TA0040": "Impact (–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ)",
        },
    },
    "Comment": {
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–µ—Ö–Ω–∏–∫–∞–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º",
        "—Ç–∞–±–ª–∏—Ü–∞": "comments",
        "–ø–æ–ª—è": {
            "id": {"—Ç–∏–ø": "INT AUTO_INCREMENT", "primary_key": True},
            "entity_type": {
                "—Ç–∏–ø": "VARCHAR(50)",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ (technique, rule)",
                "enum": ["technique", "rule"],
            },
            "entity_id": {"—Ç–∏–ø": "VARCHAR(50)", "–æ–ø–∏—Å–∞–Ω–∏–µ": "ID —Å—É—â–Ω–æ—Å—Ç–∏"},
            "user_id": {"—Ç–∏–ø": "INT", "–æ–ø–∏—Å–∞–Ω–∏–µ": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"},
            "content": {"—Ç–∏–ø": "TEXT", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"},
            "created_at": {"—Ç–∏–ø": "TIMESTAMP", "auto": True},
        },
    },
}


# =============================================================================
# –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø API –≠–ù–î–ü–û–ò–ù–¢–û–í (–° –ü–†–ò–ú–ï–†–ê–ú–ò)
# =============================================================================

# –®–∞–±–ª–æ–Ω –¥–ª—è curl –∫–æ–º–∞–Ω–¥
CURL_TEMPLATE = 'curl -X {method} "{url}" {headers} {data}'

# –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
API_DOCS = {
    # =========================================================================
    # –¢–ï–•–ù–ò–ö–ò MITRE ATT&CK
    # =========================================================================
    "/api/techniques": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫ MITRE ATT&CK",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": """
        –ü–æ–ª—É—á–∏—Ç—å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –ø–æ–∫—Ä—ã—Ç–∏—é –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —Ç–∞–∫—Ç–∏–∫–∞–º.
        """,
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "page": {
                "—Ç–∏–ø": "integer",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": 1,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
            },
            "limit": {
                "—Ç–∏–ø": "integer",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": 20,
                "–º–∏–Ω–∏–º—É–º": 1,
                "–º–∞–∫—Å–∏–º—É–º": 1000,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
            },
            "revoked": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": False,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏",
            },
            "deprecated": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": False,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏",
            },
            "platform": {
                "—Ç–∏–ø": "string",
                "enum": ["Windows", "Linux", "macOS", "Network", "Cloud", "Mobile"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ",
            },
            "coverage": {
                "—Ç–∏–ø": "string",
                "enum": ["covered", "uncovered", "partial"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é –ø—Ä–∞–≤–∏–ª–∞–º–∏",
            },
            "tactic": {
                "—Ç–∏–ø": "string",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–º–µ–Ω–∏ —Ç–∞–∫—Ç–∏–∫–∏ (initial-access, execution –∏ —Ç.–¥.)",
            },
            "search": {
                "—Ç–∏–ø": "string",
                "–º–∏–Ω_–¥–ª–∏–Ω–∞": 2,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ ID, –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é",
            },
            "sort": {
                "—Ç–∏–ø": "string",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": "attackid",
                "enum": ["attackid", "name", "rulescount", "created_at"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
            },
            "order": {
                "—Ç–∏–ø": "string",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": "asc",
                "enum": ["asc", "desc"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
            },
        },
        "–ø—Ä–∏–º–µ—Ä—ã_–∑–∞–ø—Ä–æ—Å–æ–≤": {
            "–±–∞–∑–æ–≤—ã–π": {
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Ö–Ω–∏–∫",
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/techniques"',
                "python": """import requests

response = requests.get('http://172.30.250.199:5000/api/techniques')
data = response.json()

if data['success']:
    techniques = data['data']['techniques']
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(techniques)} —Ç–µ—Ö–Ω–∏–∫")
    for tech in techniques[:3]:
        print(f"  {tech['techniqueid']}: {tech['name']}")""",
                "javascript": """const response = await fetch('http://172.30.250.199:5000/api/techniques');
const data = await response.json();

if (data.success) {
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${data.data.techniques.length} —Ç–µ—Ö–Ω–∏–∫`);
  data.data.techniques.slice(0, 3).forEach(tech => {
    console.log(`${tech.techniqueid}: ${tech.name}`);
  });
}""",
            },
            "—Å_—Ñ–∏–ª—å—Ç—Ä–∞–º–∏": {
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è Windows —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º",
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/techniques?platform=Windows&coverage=covered&limit=50"',
                "python": """import requests

params = {
    'platform': 'Windows',
    'coverage': 'covered',
    'limit': 50,
    'sort': 'name',
    'order': 'asc'
}

response = requests.get('http://172.30.250.199:5000/api/techniques', params=params)
data = response.json()

for tech in data['data']['techniques']:
    print(f"{tech['techniqueid']}: {tech['name']} - –ü—Ä–∞–≤–∏–ª: {tech['rulescount']}")""",
                "javascript": """const params = new URLSearchParams({
  platform: 'Windows',
  coverage: 'covered',
  limit: 50
});

const response = await fetch(`http://172.30.250.199:5000/api/techniques?${params}`);
const data = await response.json();

data.data.techniques.forEach(tech => {
  console.log(`${tech.techniqueid}: ${tech.name} - –ü—Ä–∞–≤–∏–ª: ${tech.rulescount}`);
});""",
            },
            "–ø–æ–∏—Å–∫": {
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É",
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/techniques?search=powershell&limit=10"',
                "python": """import requests

response = requests.get(
    'http://172.30.250.199:5000/api/techniques',
    params={'search': 'powershell', 'limit': 10}
)

techniques = response.json()['data']['techniques']
print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–Ω–∏–∫ —Å 'powershell': {len(techniques)}")""",
                "javascript": """const response = await fetch(
  'http://172.30.250.199:5000/api/techniques?search=powershell&limit=10'
);
const data = await response.json();
console.log(`–ù–∞–π–¥–µ–Ω–æ: ${data.data.techniques.length}`);""",
            },
        },
        "–ø—Ä–∏–º–µ—Ä_–æ—Ç–≤–µ—Ç–∞": {
            "success": True,
            "data": {
                "techniques": [
                    {
                        "techniqueid": "T1059",
                        "name": "Command and Scripting Interpreter",
                        "name_ru": "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤",
                        "platforms": ["Windows", "Linux", "macOS"],
                        "rulescount": 15,
                        "activerulescount": 12,
                        "hascoverage": True,
                        "deprecated": False,
                        "revoked": False,
                    }
                ],
                "pagination": {"page": 1, "limit": 20, "total": 679, "pages": 34},
                "filters": {"platform": None, "coverage": None, "tactic": None},
            },
            "timestamp": "2025-10-14T13:00:00.000Z",
        },
    },
    "/api/techniques/<techniqueid>": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–∏–∫–µ",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ –≤–∫–ª—é—á–∞—è:
        - –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        - –¢–∞–∫—Ç–∏–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–µ—Ö–Ω–∏–∫–∞
        - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç—å
        - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """,
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø—É—Ç—å_–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "techniqueid": {
                "—Ç–∏–ø": "string",
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "ID —Ç–µ—Ö–Ω–∏–∫–∏ (T1059) –∏–ª–∏ UUID",
                "–ø—Ä–∏–º–µ—Ä—ã": ["T1059", "T1059.001", "attack-pattern--970a3432..."],
            }
        },
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "includerules": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏",
            },
            "includetactics": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–∫—Ç–∏–∫–∞—Ö",
            },
            "includemetadata": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–≤–µ—Ä—Å–∏—è, –¥–∞—Ç—ã –∏ —Ç.–¥.)",
            },
            "includecomments": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": False,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            },
        },
        "–ø—Ä–∏–º–µ—Ä—ã_–∑–∞–ø—Ä–æ—Å–æ–≤": {
            "–ø–æ–ª–Ω–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": {
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/techniques/T1059?includerules=true"',
                "python": """import requests

response = requests.get(
    'http://172.30.250.199:5000/api/techniques/T1059',
    params={
        'includerules': True,
        'includetactics': True,
        'includemetadata': True
    }
)

tech = response.json()['data']['technique']
print(f"–¢–µ—Ö–Ω–∏–∫–∞: {tech['name']}")
print(f"–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å): {tech['name_ru']}")
print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(tech['platforms'])}")
print(f"–ü—Ä–∞–≤–∏–ª –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {len(tech['rules'])}")
print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: {sum(1 for r in tech['rules'] if r['active'])}")""",
                "javascript": """const getTechnique = async (techniqueId) => {
  const params = new URLSearchParams({
    includerules: true,
    includetactics: true
  });

  const response = await fetch(
    `http://172.30.250.199:5000/api/techniques/${techniqueId}?${params}`
  );
  const data = await response.json();

  if (data.success) {
    const tech = data.data.technique;
    console.log('–¢–µ—Ö–Ω–∏–∫–∞:', tech.name);
    console.log('–ü—Ä–∞–≤–∏–ª:', tech.rules.length);
    console.log('–¢–∞–∫—Ç–∏–∫:', tech.tactics.length);
  }
};

getTechnique('T1059');""",
            }
        },
        "–ø—Ä–∏–º–µ—Ä_–æ—Ç–≤–µ—Ç–∞": {
            "success": True,
            "data": {
                "technique": {
                    "techniqueid": "T1059",
                    "name": "Command and Scripting Interpreter",
                    "name_ru": "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤",
                    "description": "Adversaries may abuse command and script interpreters to execute commands...",
                    "description_ru": "–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞–º–∏ –∫–æ–º–∞–Ω–¥...",
                    "platforms": ["Windows", "Linux", "macOS"],
                    "data_sources": [
                        "Process monitoring",
                        "Process command-line parameters",
                    ],
                    "permissions_required": ["User"],
                    "tactics": [
                        {
                            "id": "TA0002",
                            "name": "Execution",
                            "name_ru": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                            "xmitreshortname": "execution",
                        }
                    ],
                    "rules": [
                        {
                            "id": "uuid",
                            "name": "PowerShell Execution",
                            "severity": "high",
                            "active": True,
                            "status": "enabled",
                        }
                    ],
                    "metadata": {
                        "version": 1.4,
                        "deprecated": False,
                        "revoked": False,
                        "created_at": "2023-01-15T10:00:00Z",
                        "updated_at": "2024-06-20T14:30:00Z",
                    },
                }
            },
        },
    },
    "/api/techniques/matrix": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ú–∞—Ç—Ä–∏—Ü–∞ MITRE ATT&CK",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞—Ç—Ä–∏—Ü—ã MITRE ATT&CK —Å–æ –≤—Å–µ–º–∏ —Ç–∞–∫—Ç–∏–∫–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏,
        –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –í–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è.
        """,
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "includedeprecated": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": False,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏",
            },
            "platform": {"—Ç–∏–ø": "string", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"},
        },
        "–ø—Ä–∏–º–µ—Ä—ã_–∑–∞–ø—Ä–æ—Å–æ–≤": {
            "–ø–æ–ª–Ω–∞—è_–º–∞—Ç—Ä–∏—Ü–∞": {
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/techniques/matrix"',
                "python": """import requests

response = requests.get('http://172.30.250.199:5000/api/techniques/matrix')
matrix = response.json()['data']

print(f"–¢–∞–∫—Ç–∏–∫: {len(matrix['tactics'])}")
print(f"–¢–µ—Ö–Ω–∏–∫: {len(matrix['techniques'])}")
print(f"–ü–æ–∫—Ä—ã—Ç–∏–µ: {matrix['statistics']['coveragepercentage']}%")

# –í—ã–≤–æ–¥ —Ç–µ—Ö–Ω–∏–∫ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º
for tactic in matrix['tactics'][:3]:
    techniques = [t for t in matrix['techniques'] if tactic['id'] in t.get('tactics', [])]
    print(f"\n{tactic['name']}: {len(techniques)} —Ç–µ—Ö–Ω–∏–∫")""",
                "javascript": """const getMatrix = async () => {
  const response = await fetch('http://172.30.250.199:5000/api/techniques/matrix');
  const data = await response.json();
  const matrix = data.data;

  console.log('–ú–∞—Ç—Ä–∏—Ü–∞ MITRE ATT&CK:');
  console.log(`  –¢–∞–∫—Ç–∏–∫: ${matrix.tactics.length}`);
  console.log(`  –¢–µ—Ö–Ω–∏–∫: ${matrix.techniques.length}`);
  console.log(`  –ü–æ–∫—Ä—ã—Ç–∏–µ: ${matrix.statistics.coveragepercentage}%`);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–µ—Ö–Ω–∏–∫ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º
  const techniquesByTactic = {};
  matrix.tactics.forEach(tactic => {
    techniquesByTactic[tactic.id] = matrix.techniques.filter(
      t => t.tactics.includes(tactic.id)
    );
  });
};""",
            }
        },
    },
    "/api/techniques/search": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏–∫",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ—Ö–Ω–∏–∫–∞–º —Å –æ—Ü–µ–Ω–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏",
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "q": {
                "—Ç–∏–ø": "string",
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π": True,
                "–º–∏–Ω_–¥–ª–∏–Ω–∞": 2,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            },
            "limit": {
                "—Ç–∏–ø": "integer",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": 50,
                "–º–∞–∫—Å–∏–º—É–º": 500,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            },
        },
        "–ø—Ä–∏–º–µ—Ä—ã_–∑–∞–ø—Ä–æ—Å–æ–≤": {
            "–ø–æ–∏—Å–∫": {
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/techniques/search?q=powershell&limit=20"',
                "python": """import requests

response = requests.get(
    'http://172.30.250.199:5000/api/techniques/search',
    params={'q': 'powershell', 'limit': 20}
)

results = response.json()['data']
print(f"–ù–∞–π–¥–µ–Ω–æ {results['count']} —Ç–µ—Ö–Ω–∏–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{results['query']}':")

for tech in results['techniques'][:5]:
    print(f"  {tech['techniqueid']}: {tech['name']}")""",
                "javascript": """const searchTechniques = async (query) => {
  const params = new URLSearchParams({q: query, limit: 20});
  const response = await fetch(
    `http://172.30.250.199:5000/api/techniques/search?${params}`
  );
  const data = await response.json();

  console.log(`–ù–∞–π–¥–µ–Ω–æ: ${data.data.count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
  data.data.techniques.forEach(tech => {
    console.log(`${tech.techniqueid}: ${tech.name}`);
  });
};

searchTechniques('powershell');""",
            }
        },
    },
    "/api/techniques/coverage": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Ö–Ω–∏–∫",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏–∫ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏",
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø—Ä–∏–º–µ—Ä—ã_–∑–∞–ø—Ä–æ—Å–æ–≤": {
            "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": {
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/techniques/coverage"',
                "python": """import requests

response = requests.get('http://172.30.250.199:5000/api/techniques/coverage')
stats = response.json()['data']['summary']

print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è:")
print(f"  –í—Å–µ–≥–æ —Ç–µ—Ö–Ω–∏–∫: {stats['totaltechniques']}")
print(f"  –ü–æ–∫—Ä—ã—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {stats['fullycovered']}")
print(f"  –ü–æ–∫—Ä—ã—Ç–æ —á–∞—Å—Ç–∏—á–Ω–æ: {stats['partiallycovered']}")
print(f"  –ù–µ –ø–æ–∫—Ä—ã—Ç–æ: {stats['notcovered']}")
print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {stats['coveragepercentage']}%")""",
            }
        },
    },
    # =========================================================================
    # –ü–†–ê–í–ò–õ–ê –ö–û–†–†–ï–õ–Ø–¶–ò–ò
    # =========================================================================
    "/api/rules": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª (GET) –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ (POST)",
        "–º–µ—Ç–æ–¥—ã": ["GET", "POST"],
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã_get": {
            "limit": {
                "—Ç–∏–ø": "integer",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": 100,
                "–º–∞–∫—Å–∏–º—É–º": 10000,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
            },
            "offset": {
                "—Ç–∏–ø": "integer",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": 0,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
            },
            "active": {"—Ç–∏–ø": "boolean", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º"},
            "severity": {
                "—Ç–∏–ø": "string",
                "enum": ["low", "medium", "high", "critical"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏",
            },
        },
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã_post": {
            "name": {
                "—Ç–∏–ø": "string",
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞",
            },
            "techniqueid": {
                "—Ç–∏–ø": "string",
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "ID —Ç–µ—Ö–Ω–∏–∫–∏ MITRE ATT&CK",
            },
            "description": {
                "—Ç–∏–ø": "string",
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞",
            },
            "logic": {
                "—Ç–∏–ø": "string",
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–õ–æ–≥–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (query)",
            },
            "severity": {
                "—Ç–∏–ø": "string",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": "medium",
                "enum": ["low", "medium", "high", "critical"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏",
            },
            "active": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞",
            },
            "tags": {"—Ç–∏–ø": "array", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"},
        },
        "–ø—Ä–∏–º–µ—Ä—ã_–∑–∞–ø—Ä–æ—Å–æ–≤": {
            "–ø–æ–ª—É—á–∏—Ç—å_—Å–ø–∏—Å–æ–∫": {
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/rules?limit=100&active=true"',
                "python": """import requests

# –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
response = requests.get(
    'http://172.30.250.199:5000/api/rules',
    params={'limit': 100, 'active': True}
)

rules = response.json()['data']['rules']
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: {len(rules)}")

for rule in rules[:5]:
    print(f"  {rule['name']} [{rule['severity']}] - {rule['techniqueid']}")""",
                "javascript": """const getRules = async () => {
  const params = new URLSearchParams({limit: 100, active: true});
  const response = await fetch(`http://172.30.250.199:5000/api/rules?${params}`);
  const data = await response.json();

  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${data.data.rules.length} –ø—Ä–∞–≤–∏–ª`);
  data.data.rules.slice(0, 5).forEach(rule => {
    console.log(`${rule.name} [${rule.severity}]`);
  });
};""",
            },
            "—Å–æ–∑–¥–∞—Ç—å_–ø—Ä–∞–≤–∏–ª–æ": {
                "curl": """curl -X POST "http://172.30.250.199:5000/api/rules" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Suspicious PowerShell Execution",
    "techniqueid": "T1059.001",
    "description": "Detects suspicious PowerShell command execution",
    "logic": "EventID:4688 AND ProcessName:*powershell.exe* AND CommandLine:*-enc*",
    "severity": "high",
    "active": true,
    "tags": ["powershell", "execution", "suspicious"]
  }'""",
                "python": """import requests

new_rule = {
    'name': 'Suspicious PowerShell Execution',
    'techniqueid': 'T1059.001',
    'description': 'Detects suspicious PowerShell command execution',
    'logic': 'EventID:4688 AND ProcessName:*powershell.exe* AND CommandLine:*-enc*',
    'severity': 'high',
    'active': True,
    'tags': ['powershell', 'execution', 'suspicious']
}

response = requests.post(
    'http://172.30.250.199:5000/api/rules',
    json=new_rule
)

if response.json()['success']:
    rule_id = response.json()['data']['ruleid']
    print(f"–ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! ID: {rule_id}")
else:
    print(f"–û—à–∏–±–∫–∞: {response.json()['error']['message']}")""",
                "javascript": """const createRule = async (ruleData) => {
  const response = await fetch('http://172.30.250.199:5000/api/rules', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify(ruleData)
  });

  const data = await response.json();

  if (data.success) {
    console.log('–ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ! ID:', data.data.ruleid);
  } else {
    console.error('–û—à–∏–±–∫–∞:', data.error.message);
  }
};

const newRule = {
  name: 'Suspicious PowerShell Execution',
  techniqueid: 'T1059.001',
  severity: 'high',
  active: true
};

createRule(newRule);""",
            },
        },
    },
    "/api/rules/<ruleid>": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–æ–º",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–ª—É—á–∏—Ç—å (GET), –æ–±–Ω–æ–≤–∏—Ç—å (PUT) –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å (DELETE) –ø—Ä–∞–≤–∏–ª–æ",
        "–º–µ—Ç–æ–¥—ã": ["GET", "PUT", "DELETE"],
        "–ø—É—Ç—å_–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "ruleid": {
                "—Ç–∏–ø": "string",
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "UUID –ø—Ä–∞–≤–∏–ª–∞",
            }
        },
        "–ø—Ä–∏–º–µ—Ä—ã_–∑–∞–ø—Ä–æ—Å–æ–≤": {
            "–ø–æ–ª—É—á–∏—Ç—å": {
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/rules/{uuid}"',
                "python": """import requests

rule_id = 'uuid'
response = requests.get(f'http://172.30.250.199:5000/api/rules/{rule_id}')
rule = response.json()['data']['rule']

print(f"–ü—Ä–∞–≤–∏–ª–æ: {rule['name']}")
print(f"–¢–µ—Ö–Ω–∏–∫–∞: {rule['techniqueid']}")
print(f"–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {rule['severity']}")""",
            },
            "–æ–±–Ω–æ–≤–∏—Ç—å": {
                "curl": """curl -X PUT "http://172.30.250.199:5000/api/rules/{uuid}" \
  -H "Content-Type: application/json" \
  -d '{"name": "Updated Rule Name", "severity": "critical"}'""",
                "python": """import requests

rule_id = 'uuid'
updates = {
    'name': 'Updated Rule Name',
    'severity': 'critical',
    'active': True
}

response = requests.put(
    f'http://172.30.250.199:5000/api/rules/{rule_id}',
    json=updates
)

if response.json()['success']:
    print('–ü—Ä–∞–≤–∏–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')""",
            },
            "—É–¥–∞–ª–∏—Ç—å": {
                "curl": 'curl -X DELETE "http://172.30.250.199:5000/api/rules/{uuid}"',
                "python": """import requests

rule_id = 'uuid'
response = requests.delete(f'http://172.30.250.199:5000/api/rules/{rule_id}')

if response.json()['success']:
    print('–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')""",
            },
        },
    },
    # =========================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    # =========================================================================
    "/api/statistics": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ —Ç–µ—Ö–Ω–∏–∫–∞—Ö, –ø—Ä–∞–≤–∏–ª–∞—Ö –∏ –ø–æ–∫—Ä—ã—Ç–∏–∏",
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø—Ä–∏–º–µ—Ä—ã_–∑–∞–ø—Ä–æ—Å–æ–≤": {
            "–ø–æ–ª—É—á–∏—Ç—å_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É": {
                "curl": 'curl -X GET "http://172.30.250.199:5000/api/statistics"',
                "python": """import requests

response = requests.get('http://172.30.250.199:5000/api/statistics')
stats = response.json()['data']['overview']

print("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
print(f"  –í—Å–µ–≥–æ —Ç–µ—Ö–Ω–∏–∫: {stats['totaltechniques']}")
print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫: {stats['activetechniques']}")
print(f"  –ü–æ–∫—Ä—ã—Ç–æ –ø—Ä–∞–≤–∏–ª–∞–º–∏: {stats['coveredtechniques']} ({stats['coveragepercentage']}%)")
print(f"  –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: {stats['totalrules']}")
print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: {stats['activerules']}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
severity = response.json()['data']['severitybreakdown']
print("\n–ü—Ä–∞–≤–∏–ª–∞ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏:")
for level, count in severity.items():
    print(f"  {level}: {count}")""",
                "javascript": """const getStatistics = async () => {
  const response = await fetch('http://172.30.250.199:5000/api/statistics');
  const data = await response.json();
  const stats = data.data.overview;

  console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', {
    techniques: stats.totaltechniques,
    covered: stats.coveredtechniques,
    coverage: `${stats.coveragepercentage}%`,
    rules: stats.totalrules,
    active: stats.activerules
  });
};""",
            }
        },
    },
    "/api/statistics/coverage": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º",
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "includepartial": {
                "—Ç–∏–ø": "boolean",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": True,
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–∫–ª—é—á–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–∫—Ä—ã—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏",
            }
        },
    },
    "/api/statistics/tactics": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–∫—Ç–∏–∫–∞–º",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–∫—Ç–∏–∫–∏ MITRE ATT&CK",
        "–º–µ—Ç–æ–¥—ã": ["GET"],
    },
    "/api/statistics/trends": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–¢—Ä–µ–Ω–¥—ã",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª",
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "period": {
                "—Ç–∏–ø": "string",
                "–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é": "30d",
                "enum": ["7d", "30d", "90d", "180d", "365d"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            }
        },
    },
    # =========================================================================
    # –û–°–¢–ê–õ–¨–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
    # =========================================================================
    "/api/comments": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ–ª—É—á–∏—Ç—å (GET) –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å (POST) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—É—â–Ω–æ—Å—Ç—è–º",
        "–º–µ—Ç–æ–¥—ã": ["GET", "POST"],
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "entityid": {
                "—Ç–∏–ø": "string",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "ID —Å—É—â–Ω–æ—Å—Ç–∏ (—Ç–µ—Ö–Ω–∏–∫–∞ –∏–ª–∏ –ø—Ä–∞–≤–∏–ª–æ)",
            },
            "entitytype": {
                "—Ç–∏–ø": "string",
                "enum": ["technique", "rule"],
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏",
            },
        },
    },
    "/api/users": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã",
        "–º–µ—Ç–æ–¥—ã": ["GET", "POST"],
    },
    "/api/analytics": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "–º–µ—Ç–æ–¥—ã": ["GET"],
    },
    "/api/audit": {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ñ—É—Ä–Ω–∞–ª –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ",
        "–º–µ—Ç–æ–¥—ã": ["GET"],
        "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
            "action": {
                "—Ç–∏–ø": "string",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è (create, update, delete)",
            },
            "startdate": {"—Ç–∏–ø": "datetime", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞"},
            "enddate": {"—Ç–∏–ø": "datetime", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞"},
            "userid": {"—Ç–∏–ø": "integer", "–æ–ø–∏—Å–∞–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"},
        },
    },
}


# =============================================================================
# –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================================================================
def create_app(config_name=None):
    """
    –§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask

    Args:
        config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (development, production, testing)

    Returns:
        Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    """
    if config_name is None:
        config_name = os.environ.get("FLASK_ENV", "development")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Flask(__name__, static_folder=".", static_url_path="")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        app.config.from_object(config[config_name])
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        app.config["SQLALCHEMY_DATABASE_URI"] = (
            "mysql+pymysql://root:@172.30.250.199:3306/mitre_attack_matrix"
        )
        app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
        app.config["SECRET_KEY"] = "dev-secret-key-change-in-production"
        app.config["API_VERSION"] = API_VERSION
        app.config["DEBUG"] = True

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    try:
        db.init_app(app)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

    # CORS
    CORS(app, origins="*", supports_credentials=True)
    print("‚úÖ CORS –≤–∫–ª—é—á–µ–Ω")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    setup_logging(app)
    register_blueprints(app)
    register_api_routes(app)
    register_error_handlers(app)
    register_request_handlers(app)
    register_static_routes(app)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    with app.app_context():
        try:
            db.create_all()
            app.logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î –≥–æ—Ç–æ–≤—ã")
        except Exception as e:
            app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ë–î: {e}")

    return app


def setup_logging(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not app.debug:
        if not os.path.exists("logs"):
            os.mkdir("logs")

        handler = RotatingFileHandler(
            "logs/api.log", maxBytes=LOG_MAX_BYTES, backupCount=LOG_BACKUP_COUNT
        )
        handler.setFormatter(
            logging.Formatter(
                "%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]"
            )
        )
        handler.setLevel(LOG_LEVEL)
        app.logger.addHandler(handler)
        app.logger.setLevel(LOG_LEVEL)
        app.logger.info("üöÄ MITRE ATT&CK Matrix API –∑–∞–ø—É—â–µ–Ω")


def register_blueprints(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è blueprints"""
    blueprints = [
        ("techniques", "/api/techniques"),
        ("rules", "/api/rules"),
        ("statistics", "/api/statistics"),
        ("comments", "/api/comments"),
        ("users", "/api/users"),
        ("analytics", "/api/analytics"),
        ("audit", "/api/audit"),
        ("matrix", "/api/matrix"),
    ]

    registered = []
    failed = []

    for bp_name, url_prefix in blueprints:
        try:
            module = __import__(f"blueprints.{bp_name}", fromlist=[f"{bp_name}_bp"])
            blueprint = getattr(module, f"{bp_name}_bp")
            app.register_blueprint(blueprint, url_prefix=url_prefix)
            registered.append(bp_name)
        except Exception as e:
            failed.append(f"{bp_name}: {e}")

    if registered:
        print(f"‚úÖ Blueprints: {', '.join(registered)}")
    if failed:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ blueprints:")
        for failure in failed:
            print(f"   - {failure}")


def get_all_routes(app):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π"""
    routes = []

    for rule in app.url_map.iter_rules():
        if rule.endpoint == "static":
            continue

        path = str(rule.rule)
        methods = ",".join(sorted(rule.methods - {"HEAD", "OPTIONS"}))

        # –ü–æ–ª—É—á–∞–µ–º docstring
        try:
            view_func = app.view_functions[rule.endpoint]
            doc = view_func.__doc__ if view_func.__doc__ else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            doc = doc.strip().split("\\n")[0]
        except:
            doc = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        if "/api/techniques" in path:
            category = "–¢–µ—Ö–Ω–∏–∫–∏"
        elif "/api/rules" in path:
            category = "–ü—Ä–∞–≤–∏–ª–∞"
        elif "/api/statistics" in path:
            category = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        elif "/api/comments" in path:
            category = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
        elif "/api/users" in path:
            category = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        elif "/api/analytics" in path:
            category = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        elif "/api/audit" in path:
            category = "–ê—É–¥–∏—Ç"
        elif "/api/matrix" in path:
            category = "–ú–∞—Ç—Ä–∏—Ü–∞"
        elif path.startswith("/api"):
            category = "Core API"
        else:
            category = "–°–∏—Å—Ç–µ–º–∞"

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        base_path = path.replace("<techniqueid>", "<id>").replace("<ruleid>", "<id>")
        enhanced = API_DOCS.get(base_path, {})

        routes.append(
            {
                "path": path,
                "methods": methods,
                "endpoint": rule.endpoint,
                "description": doc,
                "category": category,
                "enhanced": enhanced,
            }
        )

    routes.sort(key=lambda x: (x["category"], x["path"]))
    return routes


def register_api_routes(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤"""

    @app.route("/api")
    @app.route("/api/")
    def api_info():
        """–û–ø–∏—Å–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: </br>
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API, –≤–µ—Ä—Å–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–µ—Ç–∞–ª–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π). </br>

        –ó–∞–ø—Ä–æ—Å curl: </br>

        curl -X GET "http://172.30.250.199:5000/api" </br>
        –û—Ç–≤–µ—Ç: </br>

        { </br>
          "version": "13.0.0", </br>
          "categories": [ </br>
            "core", </br>
            "analytics", </br>
            "audit", </br>
            "comments", </br>
            "matrix", </br>
            "users", </br>
            "rules", </br>
            "statistics", </br>
            "techniques" </br>
          ], </br>
          "endpoints": 68, </br>
          "database": "–∑–¥–æ—Ä–æ–≤–æ", </br>
          "status": "–∑–¥–æ—Ä–æ–≤–æ", </br>
          "uptime": "–†–∞–±–æ—Ç–∞–µ—Ç", </br>
          "timestamp": "2025-10-21T20:25:31.092410" </br>
        }
        """

        if request.args.get("format") == "html" or "text/html" in request.headers.get(
            "Accept", ""
        ):
            return render_api_docs_html(app)

        # JSON –æ—Ç–≤–µ—Ç
        try:
            result = db.session.execute(text("SELECT 1")).scalar()
            db_status = "–†–∞–±–æ—Ç–∞–µ—Ç"
        except:
            db_status = "–û—à–∏–±–∫–∞"

        all_routes = get_all_routes(app)
        routes_by_category = {}

        for route in all_routes:
            cat = route["category"]
            if cat not in routes_by_category:
                routes_by_category[cat] = []
            routes_by_category[cat].append(
                {
                    "path": route["path"],
                    "methods": route["methods"],
                    "description": route["description"],
                    "documentation": route.get("enhanced"),
                }
            )

        return create_success_response(
            {
                "api": {
                    "name": "MITRE ATT&CK Matrix API",
                    "version": app.config.get("API_VERSION", API_VERSION),
                    "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π API –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ MITRE ATT&CK —Å –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π",
                    "status": "–†–∞–±–æ—Ç–∞–µ—Ç",
                    "database": db_status,
                    "features": [
                        "–ü–æ–ª–Ω–∞—è –±–∞–∑–∞ —Ç–µ—Ö–Ω–∏–∫ MITRE ATT&CK (679 —Ç–µ—Ö–Ω–∏–∫)",
                        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (852+ –ø—Ä–∞–≤–∏–ª)",
                        "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        "–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫",
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏",
                        "–ñ—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞",
                        "RESTful API –¥–∏–∑–∞–π–Ω",
                        "–ü–æ–ª–Ω–∞—è —Ä—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                        "–ü—Ä–∏–º–µ—Ä—ã –Ω–∞ Python/JavaScript",
                        "–ü—Ä–∏–º–µ—Ä—ã curl –∫–æ–º–∞–Ω–¥",
                        "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö",
                    ],
                },
                "routes": routes_by_category,
                "total_routes": len(all_routes),
                "data_models": DATA_MODELS,
                "documentation": {
                    "html": "/api?format=html",
                    "json": "/api?format=json",
                    "endpoints": len(API_DOCS),
                },
            }
        )

    @app.route("/health")
    @app.route("/api/health")
    def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (health-check) —Å–∏—Å—Ç–µ–º—ã –∏ –±–∞–∑—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API/Ping. </br>

        –ó–∞–ø—Ä–æ—Å curl: </br>
        curl -X GET "http://172.30.250.199:5000/api/health" </br>
        –û—Ç–≤–µ—Ç: </br>
        { </br>
          "database": "–∑–¥–æ—Ä–æ–≤–æ", </br>
          "status": "–∑–¥–æ—Ä–æ–≤–æ", </br>
          "timestamp": "2025-10-21T20:25:31.092410", </br>
          "uptime": "–†–∞–±–æ—Ç–∞–µ—Ç", </br>
          "version": "13.0.0" </br>
        }
        """
        try:
            result = db.session.execute(text("SELECT 1")).scalar()
            db_status = "–∑–¥–æ—Ä–æ–≤–∞" if result == 1 else "–ø—Ä–æ–±–ª–µ–º—ã"
        except Exception as e:
            db_status = f"–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}"

        return jsonify(
            {
                "status": "–∑–¥–æ—Ä–æ–≤–∞" if db_status == "–∑–¥–æ—Ä–æ–≤–∞" else "–¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–ª–∞",
                "database": db_status,
                "version": app.config.get("API_VERSION", API_VERSION),
                "uptime": "–†–∞–±–æ—Ç–∞–µ—Ç",
                "timestamp": datetime.utcnow().isoformat(),
            }
        )


def render_api_docs_html(app):
    """–†–µ–Ω–¥–µ—Ä HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è API"""
    all_routes = get_all_routes(app)
    routes_by_category = {}

    for route in all_routes:
        cat = route["category"]
        if cat not in routes_by_category:
            routes_by_category[cat] = []
        routes_by_category[cat].append(route)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    try:
        result = db.session.execute(text("SELECT 1")).scalar()
        db_status = "–†–∞–±–æ—Ç–∞–µ—Ç"
    except:
        db_status = "–æ—à–∏–±–∫–∞"

    category_icons = {
        "Core API": "üî•",
        "–¢–µ—Ö–Ω–∏–∫–∏": "üîß",
        "–ü—Ä–∞–≤–∏–ª–∞": "üìú",
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìä",
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": "üí¨",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "üë•",
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞": "üìà",
        "–ê—É–¥–∏—Ç": "üîç",
        "–°–∏—Å—Ç–µ–º–∞": "‚öôÔ∏è",
    }

    # HTML —à–∞–±–ª–æ–Ω (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ç—Ä–æ–∫)
    html = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MITRE ATT&CK Matrix API - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
               background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
               color: #1e293b; min-height: 100vh; padding: 2rem; }
        .container { max-width: 1400px; margin: 0 auto; background: white;
                    border-radius: 20px; box-shadow: 0 20px 60px rgba(0,0,0,0.3); overflow: hidden; }
        header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white; padding: 3rem 2rem; text-align: center; }
        header h1 { font-size: 2.5rem; margin-bottom: 0.5rem; }
        .stats { display: flex; justify-content: center; gap: 2rem; margin-top: 2rem; flex-wrap: wrap; }
        .stat-item { background: rgba(255,255,255,0.1); padding: 1rem 2rem; border-radius: 10px; }
        .stat-value { font-size: 2rem; font-weight: bold; display: block; }
        .stat-label { font-size: 0.875rem; opacity: 0.8; margin-top: 0.25rem; }
        .content { padding: 2rem; }
        .search-box { margin-bottom: 2rem; position: sticky; top: 0; background: white; z-index: 100;
                     padding: 1rem 0; border-bottom: 2px solid #e2e8f0; }
        .search-input { width: 100%; padding: 1rem 1.5rem; font-size: 1rem; border: 2px solid #e2e8f0;
                       border-radius: 10px; transition: all 0.2s; }
        .search-input:focus { outline: none; border-color: #667eea; box-shadow: 0 0 0 4px rgba(102,126,234,0.1); }
        .category { margin-bottom: 3rem; }
        .category-header { display: flex; align-items: center; gap: 1rem; margin-bottom: 1.5rem;
                          padding-bottom: 0.75rem; border-bottom: 3px solid #667eea; }
        .category-icon { font-size: 2rem; }
        .category-title { font-size: 1.5rem; font-weight: 700; }
        .category-count { background: #667eea; color: white; padding: 0.25rem 0.75rem;
                         border-radius: 20px; font-size: 0.875rem; font-weight: 600; }
        .route-card { background: #f8fafc; border: 2px solid #e2e8f0; border-radius: 12px;
                     padding: 1.5rem; margin-bottom: 1rem; transition: all 0.2s; cursor: pointer; }
        .route-card:hover { border-color: #667eea; box-shadow: 0 4px 12px rgba(102,126,234,0.2);
                           transform: translateY(-2px); }
        .route-methods { display: flex; gap: 0.5rem; margin-bottom: 0.75rem; }
        .method-badge { padding: 0.25rem 0.75rem; border-radius: 6px; font-size: 0.75rem;
                       font-weight: 700; text-transform: uppercase; }
        .method-GET { background: #10b981; color: white; }
        .method-POST { background: #3b82f6; color: white; }
        .method-PUT { background: #f59e0b; color: white; }
        .method-DELETE { background: #ef4444; color: white; }
        .route-path { font-family: 'Courier New', monospace; font-size: 1rem; font-weight: 600;
                     color: #667eea; margin-bottom: 0.5rem; }
        .route-description { color: #64748b; font-size: 0.875rem; line-height: 1.5; }
        footer { background: #f8fafc; padding: 2rem; text-align: center; color: #64748b;
                border-top: 2px solid #e2e8f0; }
        .footer-links { margin-top: 1rem; display: flex; justify-content: center; gap: 2rem; flex-wrap: wrap; }
        .footer-links a { color: #667eea; text-decoration: none; font-weight: 600; }
        @media (max-width: 768px) { body { padding: 1rem; } header h1 { font-size: 1.75rem; }
                                   .content { padding: 1rem; } }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üõ°Ô∏è MITRE ATT&CK Matrix API</h1>
            <p>–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</p>
            <p>–í–µ—Ä—Å–∏—è {{ version }}</p>
            <div class="stats">
                <div class="stat-item"><span class="stat-value">{{ total_routes }}</span>
                    <span class="stat-label">API –≠–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤</span></div>
                <div class="stat-item"><span class="stat-value">{{ categories|length }}</span>
                    <span class="stat-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</span></div>
                <div class="stat-item"><span class="stat-value">{{ database_status }}</span>
                    <span class="stat-label">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</span></div>
            </div>
        </header>
        <div class="content">
            <div class="search-box">
                <input type="text" id="searchInput" class="search-input" 
                       placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º...">
            </div>
            <div id="routesContainer">
                {% for category, routes in categories.items() %}
                <div class="category">
                    <div class="category-header">
                        <span class="category-icon">{{ category_icons.get(category, 'üìÅ') }}</span>
                        <h2 class="category-title">{{ category }}</h2>
                        <span class="category-count">{{ routes|length }}</span>
                    </div>
                    {% for route in routes %}
                    <div class="route-card" data-path="{{ route.path }}" data-methods="{{ route.methods }}">
                        <div class="route-methods">
                            {% for method in route.methods.split(',') %}
                            <span class="method-badge method-{{ method }}">{{ method }}</span>
                            {% endfor %}
                        </div>
                        <code class="route-path">{{ route.path }}</code>
                        <div class="route-description">{{ route.description }}</div>
                        {% if route.enhanced and route.enhanced.get('–Ω–∞–∑–≤–∞–Ω–∏–µ') %}
                        <div style="margin-top: 0.75rem; padding: 0.75rem; background: white; border-radius: 8px;">
                            <strong>{{ route.enhanced.get('–Ω–∞–∑–≤–∞–Ω–∏–µ') }}</strong>
                            <p style="font-size: 0.8125rem; color: #64748b; margin-top: 0.25rem;">
                                {{ route.enhanced.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '')[:150] }}...
                            </p>
                        </div>
                        {% endif %}
                    </div>
                    {% endfor %}
                </div>
                {% endfor %}
            </div>
        </div>
        <footer>
            <p><strong>MITRE ATT&CK Matrix API</strong> - –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</p>
            <p style="font-size: 0.875rem; margin-top: 0.5rem;">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {{ timestamp }}</p>
            <div class="footer-links">
                <a href="/api?format=json">üìÑ JSON –§–æ—Ä–º–∞—Ç</a>
                <a href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a>
                <a href="/">üè† –ì–ª–∞–≤–Ω–∞—è</a>
            </div>
        </footer>
    </div>
    <script>
        const searchInput = document.getElementById('searchInput');
        searchInput.addEventListener('input', (e) => {
            const query = e.target.value.toLowerCase();
            document.querySelectorAll('.route-card').forEach(card => {
                const path = card.dataset.path.toLowerCase();
                const methods = card.dataset.methods.toLowerCase();
                card.style.display = (path.includes(query) || methods.includes(query)) ? 'block' : 'none';
            });
        });
        document.querySelectorAll('.route-card').forEach(card => {
            card.addEventListener('click', () => {
                navigator.clipboard.writeText(window.location.origin + card.dataset.path);
                const notif = document.createElement('div');
                notif.textContent = '‚úÖ URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!';
                notif.style.cssText = 'position:fixed;top:20px;right:20px;background:#10b981;color:white;padding:1rem;border-radius:10px;z-index:1000;';
                document.body.appendChild(notif);
                setTimeout(() => notif.remove(), 2000);
            });
        });
    </script>
</body>
</html>"""

    from jinja2 import Template

    template = Template(html)

    return template.render(
        version=app.config.get("API_VERSION", API_VERSION),
        total_routes=len(all_routes),
        categories=routes_by_category,
        category_icons=category_icons,
        database_status=db_status,
        timestamp=datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC"),
    )


def register_static_routes(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""

    @app.route("/")
    def index():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        try:
            return send_from_directory(".", "index.html")
        except:
            return f"""<!DOCTYPE html>
<html><head><title>MITRE ATT&CK Matrix API</title>
<style>body{{font-family:system-ui;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);
color:white;display:flex;justify-content:center;align-items:center;min-height:100vh;margin:0;}}
.container{{text-align:center;background:rgba(255,255,255,0.1);padding:50px;border-radius:20px;}}
h1{{font-size:3em;}}a{{color:#fbbf24;text-decoration:none;font-weight:bold;margin:10px;
padding:10px 20px;background:rgba(251,191,36,0.2);border-radius:10px;display:inline-block;}}
</style></head><body><div class="container"><h1>üõ°Ô∏è MITRE ATT&CK Matrix API</h1>
<div style="font-size:2em;color:#4ade80;margin:20px 0;">‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</div>
<p>–í–µ—Ä—Å–∏—è: {app.config.get('API_VERSION', API_VERSION)}</p>
<div style="margin-top:30px;">
<a href="/api?format=html">üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API</a><br>
<a href="/health">üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã</a></div></div></body></html>"""

    @app.route("/css/<path:filename>")
    def serve_css(filename):
        try:
            return send_from_directory("css", filename)
        except:
            return create_error_response(f"CSS –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}", 404)

    @app.route("/js/<path:filename>")
    def serve_js(filename):
        try:
            return send_from_directory("js", filename)
        except:
            return create_error_response(f"JS –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}", 404)

    @app.route("/favicon.ico")
    def favicon():
        try:
            return send_from_directory(".", "favicon.ico")
        except:
            return "", 204


def register_error_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""

    @app.errorhandler(404)
    def not_found(error):
        return create_error_response("–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404)

    @app.errorhandler(500)
    def internal_error(error):
        app.logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {error}")
        return create_error_response("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500)

    @app.errorhandler(403)
    def forbidden(error):
        return create_error_response("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 403)

    @app.errorhandler(401)
    def unauthorized(error):
        return create_error_response("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", 401)

    @app.errorhandler(400)
    def bad_request(error):
        return create_error_response("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å", 400)


def register_request_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤"""

    @app.before_request
    def before_request():
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        g.request_id = generate_request_id()
        g.request_start_time = datetime.utcnow()
        g.client_ip = get_client_ip()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫—Ä–æ–º–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤)
        if not any(
            request.path.startswith(p) for p in ["/static", "/css", "/js", "/favicon"]
        ):
            app.logger.info(
                f"[{g.request_id}] {request.method} {request.path} –æ—Ç {g.client_ip}"
            )

    @app.after_request
    def after_request(response):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if hasattr(g, "request_id"):
            response.headers["X-Request-ID"] = g.request_id

        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Methods"] = (
            "GET, POST, PUT, DELETE, OPTIONS"
        )
        response.headers["Access-Control-Allow-Headers"] = (
            "Content-Type, Authorization, X-Request-ID"
        )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if hasattr(g, "request_start_time") and not any(
            request.path.startswith(p) for p in ["/static", "/css", "/js"]
        ):
            duration = (datetime.utcnow() - g.request_start_time).total_seconds()
            app.logger.info(
                f"[{g.request_id}] –û—Ç–≤–µ—Ç: {response.status_code} –í—Ä–µ–º—è: {duration:.3f}s"
            )

        return response

    @app.teardown_appcontext
    def shutdown_session(exception=None):
        """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ë–î"""
        db.session.remove()


# =============================================================================
# –°–û–ó–î–ê–ù–ò–ï –ò –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================================================================
app = create_app()


if __name__ == "__main__":
    # –ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –∑–∞–ø—É—Å–∫–∞
    print("\\n" + "=" * 80)
    print(" " * 15 + "üöÄ MITRE ATT&CK Matrix API Server")
    print(" " * 20 + "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π")
    print("=" * 80)
    print(f'üìÖ –î–∞—Ç–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
    print(f'üåê –û–∫—Ä—É–∂–µ–Ω–∏–µ: {os.environ.get("FLASK_ENV", "development")}')
    print(f"üìå –í–µ—Ä—Å–∏—è: {API_VERSION}")
    print()
    print("üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞:")
    print(f"   üîó URL: http://172.30.250.199:5000")
    print(f"   üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (HTML): http://172.30.250.199:5000/api?format=html")
    print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (JSON): http://172.30.250.199:5000/api")
    print(f"   üíö –ó–¥–æ—Ä–æ–≤—å–µ: http://172.30.250.199:5000/health")
    print()
    print("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ 679 —Ç–µ—Ö–Ω–∏–∫ MITRE ATT&CK")
    print("   ‚Ä¢ 852+ –ø—Ä–∞–≤–∏–ª –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
    print("   ‚Ä¢ –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫")
    print("   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    print("   ‚Ä¢ –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ (Python/JavaScript)")
    print("   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã curl –∫–æ–º–∞–Ω–¥")
    print("   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 80 + "\\n")

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host="0.0.0.0", port=5000, debug=True, use_reloader=True, threaded=True)
