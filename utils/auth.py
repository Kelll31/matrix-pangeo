"""
========================================
AUTHENTICATION UTILITIES - SESSION TOKEN
========================================
–ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ session tokens
–ë–ï–ó JWT - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

@version 6.1.0-SESSION-FIX
@date 2025-10-22

–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å session tokens
"""

from functools import wraps
from flask import request, jsonify, g
import os
from datetime import datetime, timedelta
from werkzeug.security import generate_password_hash, check_password_hash
import logging
import traceback

# ========================================
# –ö–û–ù–°–¢–ê–ù–¢–´
# ========================================
SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-key")

logger = logging.getLogger(__name__)


# ========================================
# –î–ï–ö–û–†–ê–¢–û–†–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
# ========================================


def login_required(f):
    """
    ‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç session token —á–µ—Ä–µ–∑ –ë–î (user_sessions —Ç–∞–±–ª–∏—Ü–∞)

    Usage:
        @app.route('/api/protected')
        @login_required
        def protected_route():
            return jsonify({'message': 'Success'})

    Authorization: Bearer <token>
    """

    @wraps(f)
    def decorated_function(*args, **kwargs):
        token = None
        auth_header = request.headers.get("Authorization")

        logger.debug(
            f"üîç Checking auth header: {auth_header[:50] if auth_header else 'NONE'}..."
        )

        # ========================================
        # –≠–¢–ê–ü 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        # ========================================
        if auth_header:
            try:
                parts = auth_header.split()

                if len(parts) == 2 and parts[0].lower() == "bearer":
                    token = parts[
                        1
                    ].strip()  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: strip() –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
                    logger.debug(f"‚úÖ Bearer token extracted: {token[:20]}...")
                else:
                    token = auth_header.strip()  # Fallback: –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–æ–∫–µ–Ω
                    logger.warning(
                        f"‚ö†Ô∏è Authorization header not in 'Bearer <token>' format, trying as token"
                    )

            except Exception as e:
                logger.error(f"‚ùå Error parsing auth header: {e}")
                logger.error(traceback.format_exc())
                return (
                    jsonify(
                        {
                            "success": False,
                            "error": "Invalid authorization header format",
                            "details": str(e),
                        }
                    ),
                    401,
                )

        if not token:
            logger.warning("‚ùå Authorization token is missing")
            return (
                jsonify({"success": False, "error": "Authorization token is missing"}),
                401,
            )

        # ========================================
        # –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î
        # ========================================
        try:
            from models.database import db, UserSessions, Users

            logger.debug(f"üîç Looking up session token in DB: {token[:20]}...")

            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º
            session_obj = UserSessions.query.filter_by(
                session_token=token, is_active=True
            ).first()

            if not session_obj:
                logger.warning(f"‚ùå Session not found for token: {token[:20]}...")

                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤–æ–æ–±—â–µ
                any_session = UserSessions.query.filter_by(session_token=token).first()
                if any_session:
                    logger.warning(
                        f"  ‚ö†Ô∏è Token exists but is_active={any_session.is_active}"
                    )
                else:
                    logger.warning(f"  ‚ö†Ô∏è Token does not exist in database at all")

                return (
                    jsonify({"success": False, "error": "Invalid or expired token"}),
                    401,
                )

            logger.debug(
                f"‚úÖ Session found: ID={session_obj.id}, User={session_obj.user_id}"
            )

            # ========================================
            # –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            # ========================================
            try:
                expires_at = session_obj.expires_at
                current_time = datetime.now()

                logger.debug(f"‚è∞ Current time: {current_time}")
                logger.debug(f"‚è∞ Expires at: {expires_at}")

                if current_time > expires_at:
                    logger.warning(
                        f"‚ùå Session expired at {expires_at} (current: {current_time})"
                    )
                    session_obj.is_active = False
                    db.session.commit()
                    return (
                        jsonify({"success": False, "error": "Token has expired"}),
                        401,
                    )

            except Exception as e:
                logger.error(f"‚ùå Error checking expiration: {e}")
                logger.error(traceback.format_exc())
                return (
                    jsonify(
                        {
                            "success": False,
                            "error": "Token validation failed",
                            "details": str(e),
                        }
                    ),
                    401,
                )

            # ========================================
            # –≠–¢–ê–ü 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # ========================================
            try:
                user = Users.query.get(session_obj.user_id)

                if not user:
                    logger.error(f"‚ùå User not found: {session_obj.user_id}")
                    return jsonify({"success": False, "error": "User not found"}), 401

                logger.debug(f"‚úÖ User found: {user.username}")

                if not user.is_active:
                    logger.warning(f"‚ùå User account is inactive: {user.username}")
                    return (
                        jsonify(
                            {"success": False, "error": "User account is inactive"}
                        ),
                        403,
                    )

            except Exception as e:
                logger.error(f"‚ùå Error getting user: {e}")
                logger.error(traceback.format_exc())
                return (
                    jsonify(
                        {
                            "success": False,
                            "error": "User lookup failed",
                            "details": str(e),
                        }
                    ),
                    401,
                )

            # ========================================
            # –≠–¢–ê–ü 5: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # ========================================
            try:
                g.user_id = user.id
                g.user = user
                g.username = user.username
                g.role = user.role
                g.user_role = user.role  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
                g.session_id = session_obj.id
                g.session_token = token

                logger.debug(
                    f"‚úÖ User authenticated: {user.username} (role: {user.role})"
                )

            except Exception as e:
                logger.error(f"‚ùå Error setting context: {e}")
                logger.error(traceback.format_exc())
                return (
                    jsonify(
                        {
                            "success": False,
                            "error": "Context setup failed",
                            "details": str(e),
                        }
                    ),
                    401,
                )

            # ========================================
            # –≠–¢–ê–ü 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            # ========================================
            try:
                session_obj.last_activity = datetime.now()
                db.session.commit()
                logger.debug(f"‚úÖ Updated last_activity for user {user.username}")

            except Exception as e:
                logger.error(f"‚ùå Error updating last_activity: {e}")
                logger.error(traceback.format_exc())
                # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É - –ø—É—Å—Ç—å –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º

            # ========================================
            # –≠–¢–ê–ü 7: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            # ========================================
            logger.debug(f"‚úÖ All auth checks passed, executing {f.__name__}")
            return f(*args, **kwargs)

        except ImportError as e:
            logger.error(f"‚ùå Import error (models not found): {e}")
            logger.error(traceback.format_exc())
            return (
                jsonify(
                    {
                        "success": False,
                        "error": "Database initialization failed",
                        "details": str(e),
                    }
                ),
                500,
            )

        except Exception as e:
            logger.error(f"‚ùå Unexpected authentication error: {type(e).__name__}: {e}")
            logger.error(traceback.format_exc())
            return (
                jsonify(
                    {
                        "success": False,
                        "error": "Authentication failed",
                        "details": str(e),
                        "error_type": type(e).__name__,
                    }
                ),
                401,
            )

    return decorated_function


def optional_auth(f):
    """
    ‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    Usage:
        @app.route('/api/public-or-private')
        @optional_auth
        def mixed_route():
            if hasattr(g, 'user'):
                return jsonify({'message': 'Authenticated', 'user': g.username})
            return jsonify({'message': 'Anonymous'})
    """

    @wraps(f)
    def decorated_function(*args, **kwargs):
        token = None
        auth_header = request.headers.get("Authorization")

        if auth_header:
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì
                parts = auth_header.split()
                if len(parts) == 2 and parts[0].lower() == "bearer":
                    token = parts[1]
                else:
                    token = auth_header
            except:
                pass

        if token:
            try:
                from models.database import db, UserSessions, Users

                session = UserSessions.query.filter_by(
                    session_token=token, is_active=True
                ).first()

                if session and datetime.now() <= session.expires_at:
                    user = Users.query.get(session.user_id)
                    if user and user.is_active:
                        g.user_id = user.id
                        g.user = user
                        g.username = user.username
                        g.role = user.role
                        g.user_role = user.role  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        g.session_id = session.id

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        session.last_activity = datetime.now()
                        db.session.commit()
            except:
                pass

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not hasattr(g, "user_id"):
            g.user_id = None
            g.user = None
            g.username = None
            g.role = None
            g.user_role = None

        return f(*args, **kwargs)

    return decorated_function


def admin_required(f):
    """
    ‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Usage:
        @app.route('/api/admin/users')
        @admin_required
        def admin_users():
            return jsonify({'users': []})
    """

    @wraps(f)
    @login_required
    def decorated_function(*args, **kwargs):
        # login_required —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, g.user_role –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        user_role = getattr(g, "role", None) or getattr(g, "user_role", None)

        if user_role != "admin":
            return (
                jsonify(
                    {"success": False, "error": "Administrator privileges required"}
                ),
                403,
            )

        return f(*args, **kwargs)

    return decorated_function


def require_role(*allowed_roles):
    """
    ‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ —Ä–æ–ª—è–º

    Args:
        *allowed_roles: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π

    Usage:
        @app.route('/api/analysts-only')
        @require_role('admin', 'analyst')
        def analysts_route():
            return jsonify({'message': 'Welcome analyst'})
    """

    def decorator(f):
        @wraps(f)
        @login_required
        def decorated_function(*args, **kwargs):
            # login_required —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
            user_role = getattr(g, "role", None) or getattr(g, "user_role", None)

            if user_role not in allowed_roles and user_role != "admin":
                return (
                    jsonify(
                        {
                            "success": False,
                            "error": f'Required role: {", ".join(allowed_roles)}',
                        }
                    ),
                    403,
                )

            return f(*args, **kwargs)

        return decorated_function

    return decorator


# ========================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================


def get_current_user():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Flask g

    Returns:
        Users or None: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    """
    return getattr(g, "user", None)


def get_current_user_id():
    """
    –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        int or None: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    """
    return getattr(g, "user_id", None)


def get_current_user_role():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str or None: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    """
    return getattr(g, "role", None) or getattr(g, "user_role", None)


def get_current_username():
    """
    –ü–æ–ª—É—á–∏—Ç—å username —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str or None: Username –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    """
    return getattr(g, "username", None)


# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_current_user_name():
    """–ê–ª–∏–∞—Å –¥–ª—è get_current_username()"""
    return get_current_username()


def authenticate_request():
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å (–≤—Ä—É—á–Ω—É—é)

    Returns:
        Users or None: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    token = extract_token_from_request()

    if not token:
        return None

    try:
        from models.database import db, UserSessions, Users

        session = UserSessions.query.filter_by(
            session_token=token, is_active=True
        ).first()

        if session and datetime.now() <= session.expires_at:
            user = Users.query.get(session.user_id)
            if user and user.is_active:
                return user
    except:
        pass

    return None


def extract_token_from_request():
    """
    ‚úÖ –ò–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

    Returns:
        str or None: –¢–æ–∫–µ–Ω –∏–ª–∏ None
    """
    auth_header = request.headers.get("Authorization")

    if not auth_header:
        return None

    try:
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì
        parts = auth_header.split()
        if len(parts) == 2 and parts[0].lower() == "bearer":
            return parts[1]  # ‚Üê parts[1] —ç—Ç–æ —Ç–æ–∫–µ–Ω!
        return auth_header  # Fallback
    except Exception:
        return None


# ========================================
# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–ê–†–û–õ–Ø–ú–ò
# ========================================


def hash_password(password):
    """
    –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Werkzeug

    Args:
        password (str): –ü–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ

    Returns:
        str: –•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    """
    return generate_password_hash(password, method="pbkdf2:sha256:600000")


def verify_password(password, hashed_password):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è

    Args:
        password (str): –ü–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        hashed_password (str): –•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å

    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    """
    try:
        return check_password_hash(hashed_password, password)
    except Exception as e:
        logger.error(f"‚ùå Password verification error: {e}")
        return False


def validate_password(
    password,
    min_length=8,
    require_uppercase=True,
    require_lowercase=True,
    require_digits=True,
    require_special=False,
):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º

    Args:
        password (str): –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        min_length (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
        require_uppercase (bool): –¢—Ä–µ–±–æ–≤–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
        require_lowercase (bool): –¢—Ä–µ–±–æ–≤–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
        require_digits (bool): –¢—Ä–µ–±–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã
        require_special (bool): –¢—Ä–µ–±–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

    Returns:
        tuple: (bool, str) - (–≤–∞–ª–∏–¥–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    if not password:
        return False, "Password is required"

    if len(password) < min_length:
        return False, f"Password must be at least {min_length} characters"

    if require_uppercase and not any(c.isupper() for c in password):
        return False, "Password must contain uppercase letter"

    if require_lowercase and not any(c.islower() for c in password):
        return False, "Password must contain lowercase letter"

    if require_digits and not any(c.isdigit() for c in password):
        return False, "Password must contain digit"

    if require_special:
        special_chars = "!@#$%^&*()_+-=[]{}|;:',.<>?/"
        if not any(c in special_chars for c in password):
            return False, "Password must contain special character"

    return True, "Valid"


# ========================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò
# ========================================


def create_session(user_id, ip_address=None, user_agent=None, remember=False):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ip_address (str): IP –∞–¥—Ä–µ—Å
        user_agent (str): User-Agent –±—Ä–∞—É–∑–µ—Ä–∞
        remember (bool): –ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ—Å—Å–∏—é (30 –¥–Ω–µ–π –≤–º–µ—Å—Ç–æ 24 —á–∞—Å–æ–≤)

    Returns:
        str: Session token
    """
    import secrets
    from models.database import db, UserSessions

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω (43 –±–∞–π—Ç–∞ = ~57 —Å–∏–º–≤–æ–ª–æ–≤ base64)
    session_token = secrets.token_urlsafe(43)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
    if remember:
        expires_in = 30 * 24 * 60 * 60  # 30 –¥–Ω–µ–π
    else:
        expires_in = 24 * 60 * 60  # 24 —á–∞—Å–∞

    expires_at = datetime.now() + timedelta(seconds=expires_in)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    session = UserSessions(
        user_id=user_id,
        session_token=session_token,
        expires_at=expires_at,
        ip_address=ip_address,
        user_agent=user_agent,
        is_active=True,
    )

    db.session.add(session)
    db.session.commit()

    logger.info(f"‚úÖ Session created for user {user_id}: {session_token[:20]}...")

    return session_token


def revoke_session(session_token):
    """
    –û—Ç–æ–∑–≤–∞—Ç—å (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å) —Å–µ—Å—Å–∏—é

    Args:
        session_token (str): Session token –¥–ª—è –æ—Ç–∑—ã–≤–∞

    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        from models.database import db, UserSessions

        session = UserSessions.query.filter_by(session_token=session_token).first()
        if session:
            session.is_active = False
            db.session.commit()
            logger.info(f"‚úÖ Session revoked: {session_token[:20]}...")
            return True
    except Exception as e:
        logger.error(f"‚ùå Failed to revoke session: {e}")

    return False


def revoke_all_user_sessions(user_id):
    """
    –û—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (logout everywhere)

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    """
    try:
        from models.database import db, UserSessions

        count = UserSessions.query.filter_by(user_id=user_id, is_active=True).update(
            {"is_active": False}
        )

        db.session.commit()
        logger.info(f"‚úÖ Revoked {count} sessions for user {user_id}")
        return count
    except Exception as e:
        logger.error(f"‚ùå Failed to revoke user sessions: {e}")
        return 0


def cleanup_expired_sessions():
    """
    –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç—ë–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    """
    try:
        from models.database import db, UserSessions

        count = UserSessions.query.filter(
            UserSessions.expires_at < datetime.now()
        ).delete()

        db.session.commit()
        logger.info(f"‚úÖ Cleaned up {count} expired sessions")
        return count
    except Exception as e:
        logger.error(f"‚ùå Failed to cleanup sessions: {e}")
        return 0


# ========================================
# –≠–ö–°–ü–û–†–¢
# ========================================
__all__ = [
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    "login_required",
    "optional_auth",
    "admin_required",
    "require_role",
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    "get_current_user",
    "get_current_user_id",
    "get_current_user_role",
    "get_current_username",
    "get_current_user_name",
    "authenticate_request",
    "extract_token_from_request",
    # –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–æ–ª—è–º–∏
    "hash_password",
    "verify_password",
    "validate_password",
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
    "create_session",
    "revoke_session",
    "revoke_all_user_sessions",
    "cleanup_expired_sessions",
]
