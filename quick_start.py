#!/usr/bin/env python3
"""
Quick Start —Å–∫—Ä–∏–ø—Ç –¥–ª—è Flask MITRE ATT&CK Matrix API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞

–ê–≤—Ç–æ—Ä: –ü–∞–Ω–≥–µ–æ–†–∞–¥–∞—Ä
–í–µ—Ä—Å–∏—è: 3.0
"""

import sys
import os
import subprocess
from pathlib import Path


def check_dotenv():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ python-dotenv"""
    try:
        from dotenv import load_dotenv

        return True
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")
        return False


def load_env_variables():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        from dotenv import load_dotenv

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ .env
        basedir = Path(__file__).parent.absolute()
        env_path = basedir / ".env"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env
        if not env_path.exists():
            print(f"‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        load_dotenv(env_path, override=True)
        print(f"‚úÖ –§–∞–π–ª .env –∑–∞–≥—Ä—É–∂–µ–Ω: {env_path}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
        return False


def get_db_config():
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    config = {
        "host": os.environ.get("DB_HOST", "172.30.250.199"),
        "port": int(os.environ.get("DB_PORT", "3306")),
        "user": os.environ.get("DB_USER", "root"),
        "password": os.environ.get("DB_PASS", "").strip('"').strip("'"),
        "database": os.environ.get("DB_NAME", "mitre_attack_matrix"),
        "charset": os.environ.get("DB_CHARSET", "utf8mb4"),
    }
    return config


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python"""
    print("1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python...")
    version = sys.version_info

    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"   ‚ùå Python {version.major}.{version.minor} —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π!")
        print("   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False

    print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro} OK")
    return True


def check_pip_packages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞–∫–µ—Ç–æ–≤"""
    print("\n2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –ø–∞–∫–µ—Ç—ã...")

    package_checks = [
        ("flask", "flask"),
        ("pymysql", "pymysql"),
        ("sqlalchemy", "sqlalchemy"),
        ("flask_sqlalchemy", "flask-sqlalchemy"),
        ("flask_cors", "flask-cors"),
        ("bcrypt", "bcrypt"),
        ("jwt", "PyJWT"),
        ("dotenv", "python-dotenv"),
    ]

    missing_packages = []

    for import_name, package_name in package_checks:
        try:
            __import__(import_name)
            print(f"   ‚úÖ {package_name}")
        except ImportError:
            print(f"   ‚ùå {package_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package_name)

    if missing_packages:
        print(f"\n   üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_packages:
            print(f"      pip install {package}")
        print("\n   –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("      pip install -r requirements.txt")
        return False

    return True


def check_mysql():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º MySQL —Å–µ—Ä–≤–µ—Ä"""
    print("\n3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—è–µ–º MySQL —Å–µ—Ä–≤–µ—Ä...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
    if not load_env_variables():
        print("   ‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    db_config = get_db_config()

    try:
        import pymysql

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        connection = pymysql.connect(
            host=db_config["host"],
            port=db_config["port"],
            user=db_config["user"],
            password=db_config["password"],
            charset=db_config["charset"],
        )

        with connection.cursor() as cursor:
            cursor.execute("SELECT VERSION()")
            version = cursor.fetchone()
            print(f"   ‚úÖ MySQL —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–µ—Ä—Å–∏—è: {version[0]}")
            print(
                f"   üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {db_config['user']}@{db_config['host']}:{db_config['port']}"
            )

        connection.close()
        return True

    except pymysql.err.OperationalError as e:
        error_code = e.args[0]

        if error_code == 1045:  # Access denied
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            print("\n   üîß –†–µ—à–µ–Ω–∏–µ:")
            print(f"      1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ .env —Ñ–∞–π–ª–µ (DB_PASS)")
            print(f"      2. –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_config['user']}")
            print(f"      3. –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: {len(db_config['password'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: mysql -u {db_config['user']} -p")

        elif error_code == 2003:  # Can't connect
            print(f"   ‚ùå MySQL —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            print("\n   üîß –†–µ—à–µ–Ω–∏–µ:")
            print("      1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MySQL –∑–∞–ø—É—â–µ–Ω")
            print("      2. –î–ª—è XAMPP: –∑–∞–ø—É—Å—Ç–∏—Ç–µ MySQL –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            print("      3. –î–ª—è Linux: systemctl start mariadb")

        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

        return False

    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\n4Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
    if not load_env_variables():
        print("   ‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return False

    db_config = get_db_config()
    db_name = db_config["database"]

    try:
        import pymysql

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = pymysql.connect(
            host=db_config["host"],
            port=db_config["port"],
            user=db_config["user"],
            password=db_config["password"],
            database=db_name,
            charset=db_config["charset"],
        )

        with connection.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            table_count = len(tables)

            print(f"   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–∞–π–¥–µ–Ω–∞")
            print(f"   üìä –¢–∞–±–ª–∏—Ü –≤ –ë–î: {table_count}")

            if table_count > 0:
                print(f"   üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:")
                for table in tables[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
                    print(f"      ‚Ä¢ {table[0]}")
                if table_count > 5:
                    print(f"      ... –∏ –µ—â–µ {table_count - 5} —Ç–∞–±–ª–∏—Ü")
            else:
                print(f"   ‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è!")

        connection.close()
        return True

    except pymysql.err.OperationalError as e:
        error_code = e.args[0]

        if error_code == 1049:  # Unknown database
            print(f"   ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{db_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("\n   üîß –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
            print(f"      1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost/phpmyadmin")
            print(f"      2. –°–æ–∑–¥–∞–π—Ç–µ –ë–î: {db_name}")
            print(f"      3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: database_demo.sql")
            print(f"\n   –ò–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É:")
            print(
                f'      mysql -u {db_config["user"]} -p -e "CREATE DATABASE {db_name} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"'
            )
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

        return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def check_config_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\n5Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")

    required_files = [
        (".env", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("config.py", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("app.py", "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask"),
    ]

    optional_files = [
        ("models/database.py", "–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
        ("utils/helpers.py", "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
        ("blueprints/techniques.py", "API —Ç–µ—Ö–Ω–∏–∫"),
        ("requirements.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"),
    ]

    all_ok = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file_path, description in required_files:
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file_path} - {description}")
        else:
            print(f"   ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω - {description}")
            all_ok = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file_path, description in optional_files:
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file_path} - {description}")
        else:
            print(f"   ‚ö†Ô∏è  {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω - {description}")

    if not all_ok:
        print("\n   üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    return all_ok


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª"""
    print("\nüìù –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª...")

    env_path = Path(__file__).parent.absolute() / ".env"

    if not env_path.exists():
        print(f"   ‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
        print("\n   üîß –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª...")

        env_template = """# Flask Configuration
FLASK_ENV=development
SECRET_KEY=your-secret-key-here-change-in-production

# MySQL Database Configuration
DB_HOST=172.30.250.199
DB_PORT=3306
DB_NAME=mitre_attack_matrix
DB_USER=root
DB_PASS=
DB_CHARSET=utf8mb4

# JWT Configuration
JWT_SECRET_KEY=your-jwt-secret-key-here

# Logging Configuration
LOG_LEVEL=DEBUG

# Application Port
PORT=5000

# Redis
REDIS_ENABLED=false
"""

        try:
            with open(env_path, "w", encoding="utf-8") as f:
                f.write(env_template)
            print(f"   ‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {env_path}")
            print("   ‚ö†Ô∏è  –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å DB_PASS –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
            return True
        except Exception as e:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .env: {e}")
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env
    print(f"   ‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {env_path}")

    if load_env_variables():
        db_config = get_db_config()
        print(f"   üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env:")
        print(f"      DB_HOST: {db_config['host']}")
        print(f"      DB_PORT: {db_config['port']}")
        print(f"      DB_USER: {db_config['user']}")
        print(f"      DB_NAME: {db_config['database']}")
        print(
            f"      DB_PASS: {'*' * len(db_config['password'])} ({len(db_config['password'])} —Å–∏–º–≤–æ–ª–æ–≤)"
        )

        if len(db_config["password"]) == 0:
            print(f"   ‚ö†Ô∏è  DB_PASS –ø—É—Å—Ç–æ–π! –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env")

        return True
    else:
        return False


def install_missing_packages():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã"""
    print("\nüîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã...")

    try:
        if os.path.exists("requirements.txt"):
            print("   üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ requirements.txt...")
            result = subprocess.run(
                [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
                capture_output=True,
                text=True,
            )

            if result.returncode == 0:
                print("   ‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ requirements.txt")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
                return False
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
            packages = [
                "flask",
                "pymysql",
                "sqlalchemy",
                "flask-sqlalchemy",
                "flask-cors",
                "bcrypt",
                "PyJWT",
                "python-dotenv",
            ]

            for package in packages:
                print(f"   üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
                result = subprocess.run(
                    [sys.executable, "-m", "pip", "install", package],
                    capture_output=True,
                    text=True,
                )

                if result.returncode != 0:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
                    return False

            print("   ‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
        return False


def run_flask_api():
    """–ó–∞–ø—É—Å–∫–∞–µ–º Flask API"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask API...")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π app.py –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    app_files = ["app.py", "app_xampp.py", "run.py"]
    app_file = None

    for filename in app_files:
        if os.path.exists(filename):
            app_file = filename
            break

    if not app_file:
        print("   ‚ùå –§–∞–π–ª app.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    print(f"   üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º: {app_file}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ .env
    port = os.environ.get("PORT", "5000")
    print(f"   üåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}")
    print("   ‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("\n" + "=" * 70)

    try:
        # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PYTHONUNBUFFERED –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        env = os.environ.copy()
        env["PYTHONUNBUFFERED"] = "1"

        subprocess.run([sys.executable, app_file], check=True, env=env)

    except KeyboardInterrupt:
        print("\n   ‚èπÔ∏è  API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    except subprocess.CalledProcessError as e:
        print(f"\n   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")
        print("\n   üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("      1. –û—à–∏–±–∫–∞ –≤ config.py - —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("      2. –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("      3. –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Python –∫–æ–¥–µ")
        print("\n   üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫:")
        print(f"      python {app_file}")
        return False

    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("üöÄ Quick Start - MITRE ATT&CK Matrix Flask API")
    print("=" * 70)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if not check_python_version():
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_ok = check_env_file()
    if not env_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å .env —Ñ–∞–π–ª–æ–º!")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç—ã
    packages_ok = check_pip_packages()

    if not packages_ok:
        response = input("\n‚ùì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã? (y/n): ")
        if response.lower() == "y":
            if install_missing_packages():
                print("\n‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...")
                packages_ok = check_pip_packages()
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã")
                return False
        else:
            return False

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [packages_ok, check_mysql(), check_database(), check_config_files()]

    if all(checks):
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
        load_env_variables()
        db_config = get_db_config()
        port = os.environ.get("PORT", "5000")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints
        print("\n" + "=" * 70)
        print("üåê Flask API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:")
        print(f"   üìã API Documentation:  http://localhost:{port}/api")
        print(f"   üîç Health Check:       http://localhost:{port}/health")
        print(f"   üìä Techniques:         http://localhost:{port}/api/techniques")
        print(f"   üìà Statistics:         http://localhost:{port}/api/statistics")

        print(f"\nüìä –í–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(
            f"   phpMyAdmin: http://localhost/phpmyadmin/index.php?route=/database/structure&db={db_config['database']}"
        )
        print("=" * 70)

        try:
            input("\nüî• –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ API (–∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...")
            run_flask_api()
        except KeyboardInterrupt:
            print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
        print("\nüí° –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã: pip install -r requirements.txt")
        print("   üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å .env —Ñ–∞–π–ª: notepad .env")
        print("   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å MySQL –∏–∑ –ø–∞–Ω–µ–ª–∏ XAMPP")

        db_config = get_db_config()
        print(
            f"   üóÑÔ∏è  phpMyAdmin: http://localhost/phpmyadmin/index.php?route=/database/structure&db={db_config['database']}"
        )

        return False


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
